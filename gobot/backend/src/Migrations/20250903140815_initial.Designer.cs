// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netlarx.Products.Gobot.Db;

#nullable disable

namespace Gobot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250903140815_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ApiHeader", b =>
                {
                    b.Property<int>("jsonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("jsonId"));

                    b.Property<Guid?>("JsonAPIID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jsonId");

                    b.HasIndex("JsonAPIID");

                    b.ToTable("ApiHeader");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Connection", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromComponentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Connection", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ConversationalForm", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowExitForm")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMultipleSubmission")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExitFormMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleSubmissionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RenderFormResponses")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireCompletion")
                        .HasColumnType("bit");

                    b.Property<bool>("SendEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAsInlineForm")
                        .HasColumnType("bit");

                    b.Property<bool>("SpamProtection")
                        .HasColumnType("bit");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<string>("SuccessMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuccessResponseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValidateEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidatePhone")
                        .HasColumnType("bit");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CoversationalForm", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormField", b =>
                {
                    b.Property<int>("FormFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormFieldId"));

                    b.Property<Guid?>("ConversationalFormID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromptPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormFieldId");

                    b.HasIndex("ConversationalFormID");

                    b.ToTable("FormField");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.JsonAPI", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JsonAPI", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.KeywordGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserInputKeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserInputKeywordId");

                    b.ToTable("KeywordGroup");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.LinkStory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkStoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkStoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LinkStory", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.QuickReply", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TextResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("QuickReply", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Stories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RootBlockConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Stories", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TextResponse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("AlternateResponses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TextResponse", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TypingDelay", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DelaySeconds")
                        .HasColumnType("float");

                    b.Property<int?>("StoriesID")
                        .HasColumnType("int");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StoriesID");

                    b.ToTable("TypingDelay", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputKeyword", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInputKeyword", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputPhrase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInputPhrase", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputTypeAnything", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anything")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInputTypeAnything", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserInputKeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserInputPhraseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserInputTypeAnythingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserInputKeywordId");

                    b.HasIndex("UserInputPhraseID");

                    b.HasIndex("UserInputTypeAnythingID");

                    b.ToTable("Variable");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ApiHeader", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.JsonAPI", null)
                        .WithMany("ApiHeaders")
                        .HasForeignKey("JsonAPIID");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormField", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.ConversationalForm", null)
                        .WithMany("FormFields")
                        .HasForeignKey("ConversationalFormID");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.KeywordGroup", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputKeyword", null)
                        .WithMany("KeywordGroup")
                        .HasForeignKey("UserInputKeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TypingDelay", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.Stories", null)
                        .WithMany("TypingDelays")
                        .HasForeignKey("StoriesID");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Variable", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputKeyword", null)
                        .WithMany("Variables")
                        .HasForeignKey("UserInputKeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputPhrase", null)
                        .WithMany("Variables")
                        .HasForeignKey("UserInputPhraseID");

                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputTypeAnything", null)
                        .WithMany("Variables")
                        .HasForeignKey("UserInputTypeAnythingID");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ConversationalForm", b =>
                {
                    b.Navigation("FormFields");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.JsonAPI", b =>
                {
                    b.Navigation("ApiHeaders");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Stories", b =>
                {
                    b.Navigation("TypingDelays");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputKeyword", b =>
                {
                    b.Navigation("KeywordGroup");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputPhrase", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputTypeAnything", b =>
                {
                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
