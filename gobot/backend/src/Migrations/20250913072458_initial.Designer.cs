// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netlarx.Products.Gobot.Db;

#nullable disable

namespace Gobot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250913072458_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.AiAssistant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FallbackStory")
                        .HasColumnType("int");

                    b.Property<string>("FallbackTextMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxToken")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plateform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("TopP")
                        .HasColumnType("float");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AiAssistants");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ApiHeader", b =>
                {
                    b.Property<Guid>("jsonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JsonAPIID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jsonId");

                    b.HasIndex("JsonAPIID");

                    b.ToTable("ApiHeaders");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ApiHeaderblock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ButtonblockId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ButtonblockId");

                    b.ToTable("ApiHeaderblock");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Bot", b =>
                {
                    b.Property<string>("BotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AllowFullscreen")
                        .HasColumnType("bit");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackgroundStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Greeting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LandingConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowBranding")
                        .HasColumnType("bit");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("BotId");

                    b.HasIndex("LandingConfigId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Buttonblock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailForNotification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonApiBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonApiHeaders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonApiMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedMediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageAfterAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RssButtonText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RssItemCount")
                        .HasColumnType("int");

                    b.Property<string>("RssUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInline")
                        .HasColumnType("bit");

                    b.Property<bool>("StopBotForUser")
                        .HasColumnType("bit");

                    b.Property<string>("StoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("Buttonblocks");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Connection", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromComponentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Connection", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ConversationalForm", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowExitForm")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMultipleSubmission")
                        .HasColumnType("bit");

                    b.Property<int>("BotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExitFormMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleSubmissionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RenderFormResponses")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireCompletion")
                        .HasColumnType("bit");

                    b.Property<bool>("SendEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAsInlineForm")
                        .HasColumnType("bit");

                    b.Property<bool>("SpamProtection")
                        .HasColumnType("bit");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<string>("SuccessMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuccessResponseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValidateEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidatePhone")
                        .HasColumnType("bit");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CoversationalForm", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormField", b =>
                {
                    b.Property<int>("FormFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormFieldId"));

                    b.Property<Guid>("ConversationalFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromptPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormFieldId");

                    b.HasIndex("ConversationalFormId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormFieldResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormResponseId");

                    b.ToTable("FormFieldResponses");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormResponses");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormSubmission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationalFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionId");

                    b.ToTable("FormSubmissions");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ImageSlideblock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("ImageSlideblocks");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.JsonAPI", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JsonAPI", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KeywordGroupId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.KeywordGroupp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserInputKeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserInputKeywordId");

                    b.ToTable("KeywordGroups");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.LandingConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LandingConfigs");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.LinkStory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LinkStoryId")
                        .HasColumnType("int");

                    b.Property<string>("LinkStoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LinkStory", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Media", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonLinkedMediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonTextMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("SingleImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.PlainKeyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserInputKeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserInputKeywordId");

                    b.ToTable("PlainKeywords");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.QuickReplyModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("textResponseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("QuickReply", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Stories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RootBlockConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Stories", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TextResponse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("AlternateResponses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BotId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuickReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TextResponse", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TrainingFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssistantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.ToTable("TrainingFiles");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TypingDelay", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DelaySeconds")
                        .HasColumnType("float");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TypingDelay", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputKeyword", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInputKeywords", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputPhrase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInputPhrases", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputTypeAnything", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anything")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToComponentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInputTypeAnythings", (string)null);
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.VariableAnything", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserInputTypeAnythingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserInputTypeAnythingId");

                    b.ToTable("AnythingVariables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.VariableKeyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserInputKeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserInputKeywordId");

                    b.ToTable("KeywordVariables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.VariablePhrase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserInputPhraseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserInputPhraseId");

                    b.ToTable("PhraseVariables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.WebsiteData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AssistantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoSync")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CssSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExcludePatterns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IncludeSubdomains")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDepth")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPages")
                        .HasColumnType("int");

                    b.Property<bool?>("RespectRobots")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteSources");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ApiHeader", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.JsonAPI", null)
                        .WithMany("ApiHeaders")
                        .HasForeignKey("JsonAPIID");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ApiHeaderblock", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.Buttonblock", "Button")
                        .WithMany("ApiHeaders")
                        .HasForeignKey("ButtonblockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Button");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Bot", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.LandingConfig", "LandingConfig")
                        .WithMany()
                        .HasForeignKey("LandingConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netlarx.Products.Gobot.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandingConfig");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Buttonblock", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.Media", "Media")
                        .WithMany("Buttons")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormField", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.ConversationalForm", "ConversationalForm")
                        .WithMany("FormFields")
                        .HasForeignKey("ConversationalFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationalForm");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormFieldResponse", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.FormResponse", "FormResponse")
                        .WithMany("FieldResponses")
                        .HasForeignKey("FormResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormResponse");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormResponse", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.ConversationalForm", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ImageSlideblock", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.Media", "Media")
                        .WithMany("Slides")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Keyword", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.KeywordGroupp", "KeywordGroup")
                        .WithMany("Keywords")
                        .HasForeignKey("KeywordGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeywordGroup");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.KeywordGroupp", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputKeyword", "UserInputKeyword")
                        .WithMany("KeywordGroups")
                        .HasForeignKey("UserInputKeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInputKeyword");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.PlainKeyword", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputKeyword", "UserInputKeyword")
                        .WithMany("PlainKeywords")
                        .HasForeignKey("UserInputKeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInputKeyword");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.TrainingFile", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.AiAssistant", "Assistant")
                        .WithMany("TrainingFiles")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.VariableAnything", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputTypeAnything", "UserInputTypeAnything")
                        .WithMany("Variables")
                        .HasForeignKey("UserInputTypeAnythingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInputTypeAnything");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.VariableKeyword", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputKeyword", "UserInputKeyword")
                        .WithMany("Variables")
                        .HasForeignKey("UserInputKeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInputKeyword");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.VariablePhrase", b =>
                {
                    b.HasOne("Netlarx.Products.Gobot.Models.UserInputPhrase", "UserInputPhrase")
                        .WithMany("Variables")
                        .HasForeignKey("UserInputPhraseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInputPhrase");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.AiAssistant", b =>
                {
                    b.Navigation("TrainingFiles");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Buttonblock", b =>
                {
                    b.Navigation("ApiHeaders");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.ConversationalForm", b =>
                {
                    b.Navigation("FormFields");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.FormResponse", b =>
                {
                    b.Navigation("FieldResponses");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.JsonAPI", b =>
                {
                    b.Navigation("ApiHeaders");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.KeywordGroupp", b =>
                {
                    b.Navigation("Keywords");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.Media", b =>
                {
                    b.Navigation("Buttons");

                    b.Navigation("Slides");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputKeyword", b =>
                {
                    b.Navigation("KeywordGroups");

                    b.Navigation("PlainKeywords");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputPhrase", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Netlarx.Products.Gobot.Models.UserInputTypeAnything", b =>
                {
                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
