// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "button.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message chatbot.ApiHeader
 */
export interface ApiHeader {
    /**
     * @generated from protobuf field: string key = 1
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2
     */
    value: string;
}
/**
 * @generated from protobuf message chatbot.Button
 */
export interface Button {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @generated from protobuf field: string type = 3
     */
    type: string;
    /**
     * @generated from protobuf field: string value = 4
     */
    value: string;
    /**
     * @generated from protobuf field: string textMessage = 5
     */
    textMessage: string;
    /**
     * @generated from protobuf field: string linkedMediaId = 6
     */
    linkedMediaId: string;
    /**
     * @generated from protobuf field: string url = 7
     */
    url: string;
    /**
     * @generated from protobuf field: string phoneNumber = 8
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string storyId = 9
     */
    storyId: string;
    /**
     * @generated from protobuf field: string rssUrl = 10
     */
    rssUrl: string;
    /**
     * @generated from protobuf field: int32 rssItemCount = 11
     */
    rssItemCount: number;
    /**
     * @generated from protobuf field: string rssButtonText = 12
     */
    rssButtonText: string;
    /**
     * @generated from protobuf field: string jsonApiUrl = 13
     */
    jsonApiUrl: string;
    /**
     * @generated from protobuf field: string jsonApiMethod = 14
     */
    jsonApiMethod: string;
    /**
     * @generated from protobuf field: string jsonApiHeaders = 15
     */
    jsonApiHeaders: string;
    /**
     * @generated from protobuf field: string jsonApiBody = 16
     */
    jsonApiBody: string;
    /**
     * @generated from protobuf field: string apiEndpoint = 17
     */
    apiEndpoint: string;
    /**
     * @generated from protobuf field: string requestType = 18
     */
    requestType: string;
    /**
     * @generated from protobuf field: repeated chatbot.ApiHeader apiHeaders = 19
     */
    apiHeaders: ApiHeader[];
    /**
     * @generated from protobuf field: string messageAfterAction = 20
     */
    messageAfterAction: string;
    /**
     * @generated from protobuf field: string emailForNotification = 21
     */
    emailForNotification: string;
    /**
     * @generated from protobuf field: bool stopBotForUser = 22
     */
    stopBotForUser: boolean;
    /**
     * @generated from protobuf field: string formId = 23
     */
    formId: string;
    /**
     * @generated from protobuf field: bool showInline = 24
     */
    showInline: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ApiHeader$Type extends MessageType<ApiHeader> {
    constructor() {
        super("chatbot.ApiHeader", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApiHeader>): ApiHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<ApiHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApiHeader): ApiHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApiHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.ApiHeader
 */
export const ApiHeader = new ApiHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType<Button> {
    constructor() {
        super("chatbot.Button", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "textMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "linkedMediaId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "phoneNumber", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "storyId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "rssUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "rssItemCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "rssButtonText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "jsonApiUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "jsonApiMethod", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "jsonApiHeaders", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "jsonApiBody", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "apiEndpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "requestType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "apiHeaders", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApiHeader },
            { no: 20, name: "messageAfterAction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "emailForNotification", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "stopBotForUser", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "formId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "showInline", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Button>): Button {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        message.type = "";
        message.value = "";
        message.textMessage = "";
        message.linkedMediaId = "";
        message.url = "";
        message.phoneNumber = "";
        message.storyId = "";
        message.rssUrl = "";
        message.rssItemCount = 0;
        message.rssButtonText = "";
        message.jsonApiUrl = "";
        message.jsonApiMethod = "";
        message.jsonApiHeaders = "";
        message.jsonApiBody = "";
        message.apiEndpoint = "";
        message.requestType = "";
        message.apiHeaders = [];
        message.messageAfterAction = "";
        message.emailForNotification = "";
        message.stopBotForUser = false;
        message.formId = "";
        message.showInline = false;
        if (value !== undefined)
            reflectionMergePartial<Button>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Button): Button {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string value */ 4:
                    message.value = reader.string();
                    break;
                case /* string textMessage */ 5:
                    message.textMessage = reader.string();
                    break;
                case /* string linkedMediaId */ 6:
                    message.linkedMediaId = reader.string();
                    break;
                case /* string url */ 7:
                    message.url = reader.string();
                    break;
                case /* string phoneNumber */ 8:
                    message.phoneNumber = reader.string();
                    break;
                case /* string storyId */ 9:
                    message.storyId = reader.string();
                    break;
                case /* string rssUrl */ 10:
                    message.rssUrl = reader.string();
                    break;
                case /* int32 rssItemCount */ 11:
                    message.rssItemCount = reader.int32();
                    break;
                case /* string rssButtonText */ 12:
                    message.rssButtonText = reader.string();
                    break;
                case /* string jsonApiUrl */ 13:
                    message.jsonApiUrl = reader.string();
                    break;
                case /* string jsonApiMethod */ 14:
                    message.jsonApiMethod = reader.string();
                    break;
                case /* string jsonApiHeaders */ 15:
                    message.jsonApiHeaders = reader.string();
                    break;
                case /* string jsonApiBody */ 16:
                    message.jsonApiBody = reader.string();
                    break;
                case /* string apiEndpoint */ 17:
                    message.apiEndpoint = reader.string();
                    break;
                case /* string requestType */ 18:
                    message.requestType = reader.string();
                    break;
                case /* repeated chatbot.ApiHeader apiHeaders */ 19:
                    message.apiHeaders.push(ApiHeader.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string messageAfterAction */ 20:
                    message.messageAfterAction = reader.string();
                    break;
                case /* string emailForNotification */ 21:
                    message.emailForNotification = reader.string();
                    break;
                case /* bool stopBotForUser */ 22:
                    message.stopBotForUser = reader.bool();
                    break;
                case /* string formId */ 23:
                    message.formId = reader.string();
                    break;
                case /* bool showInline */ 24:
                    message.showInline = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Button, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string value = 4; */
        if (message.value !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.value);
        /* string textMessage = 5; */
        if (message.textMessage !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textMessage);
        /* string linkedMediaId = 6; */
        if (message.linkedMediaId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.linkedMediaId);
        /* string url = 7; */
        if (message.url !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.url);
        /* string phoneNumber = 8; */
        if (message.phoneNumber !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.phoneNumber);
        /* string storyId = 9; */
        if (message.storyId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.storyId);
        /* string rssUrl = 10; */
        if (message.rssUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.rssUrl);
        /* int32 rssItemCount = 11; */
        if (message.rssItemCount !== 0)
            writer.tag(11, WireType.Varint).int32(message.rssItemCount);
        /* string rssButtonText = 12; */
        if (message.rssButtonText !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.rssButtonText);
        /* string jsonApiUrl = 13; */
        if (message.jsonApiUrl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.jsonApiUrl);
        /* string jsonApiMethod = 14; */
        if (message.jsonApiMethod !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.jsonApiMethod);
        /* string jsonApiHeaders = 15; */
        if (message.jsonApiHeaders !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.jsonApiHeaders);
        /* string jsonApiBody = 16; */
        if (message.jsonApiBody !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.jsonApiBody);
        /* string apiEndpoint = 17; */
        if (message.apiEndpoint !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.apiEndpoint);
        /* string requestType = 18; */
        if (message.requestType !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.requestType);
        /* repeated chatbot.ApiHeader apiHeaders = 19; */
        for (let i = 0; i < message.apiHeaders.length; i++)
            ApiHeader.internalBinaryWrite(message.apiHeaders[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* string messageAfterAction = 20; */
        if (message.messageAfterAction !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.messageAfterAction);
        /* string emailForNotification = 21; */
        if (message.emailForNotification !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.emailForNotification);
        /* bool stopBotForUser = 22; */
        if (message.stopBotForUser !== false)
            writer.tag(22, WireType.Varint).bool(message.stopBotForUser);
        /* string formId = 23; */
        if (message.formId !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.formId);
        /* bool showInline = 24; */
        if (message.showInline !== false)
            writer.tag(24, WireType.Varint).bool(message.showInline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.Button
 */
export const Button = new Button$Type();
