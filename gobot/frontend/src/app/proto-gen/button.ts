/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: button.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export class ApiHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            value?: string;
        }): ApiHeader {
            const message = new ApiHeader({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApiHeader {
            return ApiHeader.deserialize(bytes);
        }
    }
    export class Button extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            type?: string;
            value?: string;
            textMessage?: string;
            linkedMediaId?: string;
            url?: string;
            phoneNumber?: string;
            storyId?: string;
            rssUrl?: string;
            rssItemCount?: number;
            rssButtonText?: string;
            jsonApiUrl?: string;
            jsonApiMethod?: string;
            jsonApiHeaders?: string;
            jsonApiBody?: string;
            apiEndpoint?: string;
            requestType?: string;
            apiHeaders?: ApiHeader[];
            messageAfterAction?: string;
            emailForNotification?: string;
            stopBotForUser?: boolean;
            formId?: string;
            showInline?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [19], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("textMessage" in data && data.textMessage != undefined) {
                    this.textMessage = data.textMessage;
                }
                if ("linkedMediaId" in data && data.linkedMediaId != undefined) {
                    this.linkedMediaId = data.linkedMediaId;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("phoneNumber" in data && data.phoneNumber != undefined) {
                    this.phoneNumber = data.phoneNumber;
                }
                if ("storyId" in data && data.storyId != undefined) {
                    this.storyId = data.storyId;
                }
                if ("rssUrl" in data && data.rssUrl != undefined) {
                    this.rssUrl = data.rssUrl;
                }
                if ("rssItemCount" in data && data.rssItemCount != undefined) {
                    this.rssItemCount = data.rssItemCount;
                }
                if ("rssButtonText" in data && data.rssButtonText != undefined) {
                    this.rssButtonText = data.rssButtonText;
                }
                if ("jsonApiUrl" in data && data.jsonApiUrl != undefined) {
                    this.jsonApiUrl = data.jsonApiUrl;
                }
                if ("jsonApiMethod" in data && data.jsonApiMethod != undefined) {
                    this.jsonApiMethod = data.jsonApiMethod;
                }
                if ("jsonApiHeaders" in data && data.jsonApiHeaders != undefined) {
                    this.jsonApiHeaders = data.jsonApiHeaders;
                }
                if ("jsonApiBody" in data && data.jsonApiBody != undefined) {
                    this.jsonApiBody = data.jsonApiBody;
                }
                if ("apiEndpoint" in data && data.apiEndpoint != undefined) {
                    this.apiEndpoint = data.apiEndpoint;
                }
                if ("requestType" in data && data.requestType != undefined) {
                    this.requestType = data.requestType;
                }
                if ("apiHeaders" in data && data.apiHeaders != undefined) {
                    this.apiHeaders = data.apiHeaders;
                }
                if ("messageAfterAction" in data && data.messageAfterAction != undefined) {
                    this.messageAfterAction = data.messageAfterAction;
                }
                if ("emailForNotification" in data && data.emailForNotification != undefined) {
                    this.emailForNotification = data.emailForNotification;
                }
                if ("stopBotForUser" in data && data.stopBotForUser != undefined) {
                    this.stopBotForUser = data.stopBotForUser;
                }
                if ("formId" in data && data.formId != undefined) {
                    this.formId = data.formId;
                }
                if ("showInline" in data && data.showInline != undefined) {
                    this.showInline = data.showInline;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get textMessage() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set textMessage(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get linkedMediaId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set linkedMediaId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get phoneNumber() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set phoneNumber(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get storyId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set storyId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get rssUrl() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set rssUrl(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get rssItemCount() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set rssItemCount(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get rssButtonText() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set rssButtonText(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get jsonApiUrl() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set jsonApiUrl(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get jsonApiMethod() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set jsonApiMethod(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get jsonApiHeaders() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set jsonApiHeaders(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get jsonApiBody() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set jsonApiBody(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get apiEndpoint() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set apiEndpoint(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get requestType() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set requestType(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get apiHeaders() {
            return pb_1.Message.getRepeatedWrapperField(this, ApiHeader, 19) as ApiHeader[];
        }
        set apiHeaders(value: ApiHeader[]) {
            pb_1.Message.setRepeatedWrapperField(this, 19, value);
        }
        get messageAfterAction() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set messageAfterAction(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get emailForNotification() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set emailForNotification(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get stopBotForUser() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set stopBotForUser(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get formId() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set formId(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get showInline() {
            return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
        }
        set showInline(value: boolean) {
            pb_1.Message.setField(this, 24, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            type?: string;
            value?: string;
            textMessage?: string;
            linkedMediaId?: string;
            url?: string;
            phoneNumber?: string;
            storyId?: string;
            rssUrl?: string;
            rssItemCount?: number;
            rssButtonText?: string;
            jsonApiUrl?: string;
            jsonApiMethod?: string;
            jsonApiHeaders?: string;
            jsonApiBody?: string;
            apiEndpoint?: string;
            requestType?: string;
            apiHeaders?: ReturnType<typeof ApiHeader.prototype.toObject>[];
            messageAfterAction?: string;
            emailForNotification?: string;
            stopBotForUser?: boolean;
            formId?: string;
            showInline?: boolean;
        }): Button {
            const message = new Button({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.textMessage != null) {
                message.textMessage = data.textMessage;
            }
            if (data.linkedMediaId != null) {
                message.linkedMediaId = data.linkedMediaId;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.phoneNumber != null) {
                message.phoneNumber = data.phoneNumber;
            }
            if (data.storyId != null) {
                message.storyId = data.storyId;
            }
            if (data.rssUrl != null) {
                message.rssUrl = data.rssUrl;
            }
            if (data.rssItemCount != null) {
                message.rssItemCount = data.rssItemCount;
            }
            if (data.rssButtonText != null) {
                message.rssButtonText = data.rssButtonText;
            }
            if (data.jsonApiUrl != null) {
                message.jsonApiUrl = data.jsonApiUrl;
            }
            if (data.jsonApiMethod != null) {
                message.jsonApiMethod = data.jsonApiMethod;
            }
            if (data.jsonApiHeaders != null) {
                message.jsonApiHeaders = data.jsonApiHeaders;
            }
            if (data.jsonApiBody != null) {
                message.jsonApiBody = data.jsonApiBody;
            }
            if (data.apiEndpoint != null) {
                message.apiEndpoint = data.apiEndpoint;
            }
            if (data.requestType != null) {
                message.requestType = data.requestType;
            }
            if (data.apiHeaders != null) {
                message.apiHeaders = data.apiHeaders.map(item => ApiHeader.fromObject(item));
            }
            if (data.messageAfterAction != null) {
                message.messageAfterAction = data.messageAfterAction;
            }
            if (data.emailForNotification != null) {
                message.emailForNotification = data.emailForNotification;
            }
            if (data.stopBotForUser != null) {
                message.stopBotForUser = data.stopBotForUser;
            }
            if (data.formId != null) {
                message.formId = data.formId;
            }
            if (data.showInline != null) {
                message.showInline = data.showInline;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                type?: string;
                value?: string;
                textMessage?: string;
                linkedMediaId?: string;
                url?: string;
                phoneNumber?: string;
                storyId?: string;
                rssUrl?: string;
                rssItemCount?: number;
                rssButtonText?: string;
                jsonApiUrl?: string;
                jsonApiMethod?: string;
                jsonApiHeaders?: string;
                jsonApiBody?: string;
                apiEndpoint?: string;
                requestType?: string;
                apiHeaders?: ReturnType<typeof ApiHeader.prototype.toObject>[];
                messageAfterAction?: string;
                emailForNotification?: string;
                stopBotForUser?: boolean;
                formId?: string;
                showInline?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.textMessage != null) {
                data.textMessage = this.textMessage;
            }
            if (this.linkedMediaId != null) {
                data.linkedMediaId = this.linkedMediaId;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.phoneNumber != null) {
                data.phoneNumber = this.phoneNumber;
            }
            if (this.storyId != null) {
                data.storyId = this.storyId;
            }
            if (this.rssUrl != null) {
                data.rssUrl = this.rssUrl;
            }
            if (this.rssItemCount != null) {
                data.rssItemCount = this.rssItemCount;
            }
            if (this.rssButtonText != null) {
                data.rssButtonText = this.rssButtonText;
            }
            if (this.jsonApiUrl != null) {
                data.jsonApiUrl = this.jsonApiUrl;
            }
            if (this.jsonApiMethod != null) {
                data.jsonApiMethod = this.jsonApiMethod;
            }
            if (this.jsonApiHeaders != null) {
                data.jsonApiHeaders = this.jsonApiHeaders;
            }
            if (this.jsonApiBody != null) {
                data.jsonApiBody = this.jsonApiBody;
            }
            if (this.apiEndpoint != null) {
                data.apiEndpoint = this.apiEndpoint;
            }
            if (this.requestType != null) {
                data.requestType = this.requestType;
            }
            if (this.apiHeaders != null) {
                data.apiHeaders = this.apiHeaders.map((item: ApiHeader) => item.toObject());
            }
            if (this.messageAfterAction != null) {
                data.messageAfterAction = this.messageAfterAction;
            }
            if (this.emailForNotification != null) {
                data.emailForNotification = this.emailForNotification;
            }
            if (this.stopBotForUser != null) {
                data.stopBotForUser = this.stopBotForUser;
            }
            if (this.formId != null) {
                data.formId = this.formId;
            }
            if (this.showInline != null) {
                data.showInline = this.showInline;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.value.length)
                writer.writeString(4, this.value);
            if (this.textMessage.length)
                writer.writeString(5, this.textMessage);
            if (this.linkedMediaId.length)
                writer.writeString(6, this.linkedMediaId);
            if (this.url.length)
                writer.writeString(7, this.url);
            if (this.phoneNumber.length)
                writer.writeString(8, this.phoneNumber);
            if (this.storyId.length)
                writer.writeString(9, this.storyId);
            if (this.rssUrl.length)
                writer.writeString(10, this.rssUrl);
            if (this.rssItemCount != 0)
                writer.writeInt32(11, this.rssItemCount);
            if (this.rssButtonText.length)
                writer.writeString(12, this.rssButtonText);
            if (this.jsonApiUrl.length)
                writer.writeString(13, this.jsonApiUrl);
            if (this.jsonApiMethod.length)
                writer.writeString(14, this.jsonApiMethod);
            if (this.jsonApiHeaders.length)
                writer.writeString(15, this.jsonApiHeaders);
            if (this.jsonApiBody.length)
                writer.writeString(16, this.jsonApiBody);
            if (this.apiEndpoint.length)
                writer.writeString(17, this.apiEndpoint);
            if (this.requestType.length)
                writer.writeString(18, this.requestType);
            if (this.apiHeaders.length)
                writer.writeRepeatedMessage(19, this.apiHeaders, (item: ApiHeader) => item.serialize(writer));
            if (this.messageAfterAction.length)
                writer.writeString(20, this.messageAfterAction);
            if (this.emailForNotification.length)
                writer.writeString(21, this.emailForNotification);
            if (this.stopBotForUser != false)
                writer.writeBool(22, this.stopBotForUser);
            if (this.formId.length)
                writer.writeString(23, this.formId);
            if (this.showInline != false)
                writer.writeBool(24, this.showInline);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Button {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Button();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.value = reader.readString();
                        break;
                    case 5:
                        message.textMessage = reader.readString();
                        break;
                    case 6:
                        message.linkedMediaId = reader.readString();
                        break;
                    case 7:
                        message.url = reader.readString();
                        break;
                    case 8:
                        message.phoneNumber = reader.readString();
                        break;
                    case 9:
                        message.storyId = reader.readString();
                        break;
                    case 10:
                        message.rssUrl = reader.readString();
                        break;
                    case 11:
                        message.rssItemCount = reader.readInt32();
                        break;
                    case 12:
                        message.rssButtonText = reader.readString();
                        break;
                    case 13:
                        message.jsonApiUrl = reader.readString();
                        break;
                    case 14:
                        message.jsonApiMethod = reader.readString();
                        break;
                    case 15:
                        message.jsonApiHeaders = reader.readString();
                        break;
                    case 16:
                        message.jsonApiBody = reader.readString();
                        break;
                    case 17:
                        message.apiEndpoint = reader.readString();
                        break;
                    case 18:
                        message.requestType = reader.readString();
                        break;
                    case 19:
                        reader.readMessage(message.apiHeaders, () => pb_1.Message.addToRepeatedWrapperField(message, 19, ApiHeader.deserialize(reader), ApiHeader));
                        break;
                    case 20:
                        message.messageAfterAction = reader.readString();
                        break;
                    case 21:
                        message.emailForNotification = reader.readString();
                        break;
                    case 22:
                        message.stopBotForUser = reader.readBool();
                        break;
                    case 23:
                        message.formId = reader.readString();
                        break;
                    case 24:
                        message.showInline = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Button {
            return Button.deserialize(bytes);
        }
    }
}
