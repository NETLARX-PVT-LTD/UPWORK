/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: link_story_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export class LinkStoryBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            linkStoryId?: string;
            linkStoryName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("linkStoryId" in data && data.linkStoryId != undefined) {
                    this.linkStoryId = data.linkStoryId;
                }
                if ("linkStoryName" in data && data.linkStoryName != undefined) {
                    this.linkStoryName = data.linkStoryName;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get linkStoryId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set linkStoryId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get linkStoryName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set linkStoryName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: string;
            linkStoryId?: string;
            linkStoryName?: string;
        }): LinkStoryBlock {
            const message = new LinkStoryBlock({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.linkStoryId != null) {
                message.linkStoryId = data.linkStoryId;
            }
            if (data.linkStoryName != null) {
                message.linkStoryName = data.linkStoryName;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                linkStoryId?: string;
                linkStoryName?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.linkStoryId != null) {
                data.linkStoryId = this.linkStoryId;
            }
            if (this.linkStoryName != null) {
                data.linkStoryName = this.linkStoryName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.linkStoryId.length)
                writer.writeString(2, this.linkStoryId);
            if (this.linkStoryName.length)
                writer.writeString(3, this.linkStoryName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LinkStoryBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LinkStoryBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.linkStoryId = reader.readString();
                        break;
                    case 3:
                        message.linkStoryName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LinkStoryBlock {
            return LinkStoryBlock.deserialize(bytes);
        }
    }
}
