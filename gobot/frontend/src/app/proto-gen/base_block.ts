/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: base_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\timestamp";
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export enum BlockStatus {
        ACTIVE = 0,
        ERROR = 1,
        NEW = 2,
        DISABLED = 3,
        NORMAL = 4
    }
    export enum BlockType {
        TEXT_RESPONSE = 0,
        USER_INPUT = 1,
        TYPING_DELAY = 2,
        CONVERSATIONAL_FORM = 3,
        MEDIA_BLOCK = 4,
        LINK_STORY = 5,
        JSON_API = 6
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): Position {
            const message = new Position({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeDouble(1, this.x);
            if (this.y != 0)
                writer.writeDouble(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readDouble();
                        break;
                    case 2:
                        message.y = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class Connections extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            input?: string[];
            output?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("input" in data && data.input != undefined) {
                    this.input = data.input;
                }
                if ("output" in data && data.output != undefined) {
                    this.output = data.output;
                }
            }
        }
        get input() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set input(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get output() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set output(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            input?: string[];
            output?: string[];
        }): Connections {
            const message = new Connections({});
            if (data.input != null) {
                message.input = data.input;
            }
            if (data.output != null) {
                message.output = data.output;
            }
            return message;
        }
        toObject() {
            const data: {
                input?: string[];
                output?: string[];
            } = {};
            if (this.input != null) {
                data.input = this.input;
            }
            if (this.output != null) {
                data.output = this.output;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.input.length)
                writer.writeRepeatedString(1, this.input);
            if (this.output.length)
                writer.writeRepeatedString(2, this.output);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connections {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connections();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Connections {
            return Connections.deserialize(bytes);
        }
    }
    export class BaseBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            icon?: string;
            type?: BlockType;
            status?: BlockStatus;
            x?: number;
            y?: number;
            width?: number;
            height?: number;
            description?: string;
            createdAt?: dependency_1.google.protobuf.Timestamp;
            updatedAt?: dependency_1.google.protobuf.Timestamp;
            position?: Position;
            connections?: Connections;
            isInitializing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("connections" in data && data.connections != undefined) {
                    this.connections = data.connections;
                }
                if ("isInitializing" in data && data.isInitializing != undefined) {
                    this.isInitializing = data.isInitializing;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, BlockType.TEXT_RESPONSE) as BlockType;
        }
        set type(value: BlockType) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, BlockStatus.ACTIVE) as BlockStatus;
        }
        set status(value: BlockStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 12) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_updatedAt() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 13) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get connections() {
            return pb_1.Message.getWrapperField(this, Connections, 14) as Connections;
        }
        set connections(value: Connections) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_connections() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get isInitializing() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set isInitializing(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            icon?: string;
            type?: BlockType;
            status?: BlockStatus;
            x?: number;
            y?: number;
            width?: number;
            height?: number;
            description?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            position?: ReturnType<typeof Position.prototype.toObject>;
            connections?: ReturnType<typeof Connections.prototype.toObject>;
            isInitializing?: boolean;
        }): BaseBlock {
            const message = new BaseBlock({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.icon != null) {
                message.icon = data.icon;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            if (data.connections != null) {
                message.connections = Connections.fromObject(data.connections);
            }
            if (data.isInitializing != null) {
                message.isInitializing = data.isInitializing;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                icon?: string;
                type?: BlockType;
                status?: BlockStatus;
                x?: number;
                y?: number;
                width?: number;
                height?: number;
                description?: string;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                position?: ReturnType<typeof Position.prototype.toObject>;
                connections?: ReturnType<typeof Connections.prototype.toObject>;
                isInitializing?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.icon != null) {
                data.icon = this.icon;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.connections != null) {
                data.connections = this.connections.toObject();
            }
            if (this.isInitializing != null) {
                data.isInitializing = this.isInitializing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.icon.length)
                writer.writeString(3, this.icon);
            if (this.type != BlockType.TEXT_RESPONSE)
                writer.writeEnum(4, this.type);
            if (this.status != BlockStatus.ACTIVE)
                writer.writeEnum(5, this.status);
            if (this.x != 0)
                writer.writeDouble(6, this.x);
            if (this.y != 0)
                writer.writeDouble(7, this.y);
            if (this.width != 0)
                writer.writeDouble(8, this.width);
            if (this.height != 0)
                writer.writeDouble(9, this.height);
            if (this.description.length)
                writer.writeString(10, this.description);
            if (this.has_createdAt)
                writer.writeMessage(11, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.has_updatedAt)
                writer.writeMessage(12, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (this.has_position)
                writer.writeMessage(13, this.position, () => this.position.serialize(writer));
            if (this.has_connections)
                writer.writeMessage(14, this.connections, () => this.connections.serialize(writer));
            if (this.isInitializing != false)
                writer.writeBool(15, this.isInitializing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.icon = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readEnum();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    case 6:
                        message.x = reader.readDouble();
                        break;
                    case 7:
                        message.y = reader.readDouble();
                        break;
                    case 8:
                        message.width = reader.readDouble();
                        break;
                    case 9:
                        message.height = reader.readDouble();
                        break;
                    case 10:
                        message.description = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.connections, () => message.connections = Connections.deserialize(reader));
                        break;
                    case 15:
                        message.isInitializing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseBlock {
            return BaseBlock.deserialize(bytes);
        }
    }
}
