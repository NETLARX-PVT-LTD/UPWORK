// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "base_block.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message chatbot.Position
 */
export interface Position {
    /**
     * @generated from protobuf field: double x = 1
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 2
     */
    y: number;
}
/**
 * @generated from protobuf message chatbot.Connections
 */
export interface Connections {
    /**
     * @generated from protobuf field: repeated string input = 1
     */
    input: string[];
    /**
     * @generated from protobuf field: repeated string output = 2
     */
    output: string[];
}
// message BaseBlock {
// string id = 1;
// string name = 2;
// string icon = 3;
// BlockType type = 4;
// BlockStatus status = 5;
// double x = 6;
// double y = 7;
// double width = 8;
// double height = 9;
// string description = 10;
// google.protobuf.Timestamp createdAt = 11;
// google.protobuf.Timestamp updatedAt = 12;
// Position position = 13;
// Connections connections = 14;
// bool isInitializing = 15;
// }

/**
 * @generated from protobuf message chatbot.BaseBlock
 */
export interface BaseBlock {
    /**
     * @generated from protobuf field: string Id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp CreatedDate = 2
     */
    createdDate?: Timestamp;
    /**
     * @generated from protobuf field: string ToComponentType = 3
     */
    toComponentType: string;
    /**
     * @generated from protobuf field: string ToComponentId = 4
     */
    toComponentId: string;
}
/**
 * @generated from protobuf enum chatbot.BlockStatus
 */
export enum BlockStatus {
    /**
     * @generated from protobuf enum value: ACTIVE = 0;
     */
    ACTIVE = 0,
    /**
     * @generated from protobuf enum value: ERROR = 1;
     */
    ERROR = 1,
    /**
     * @generated from protobuf enum value: NEW = 2;
     */
    NEW = 2,
    /**
     * @generated from protobuf enum value: DISABLED = 3;
     */
    DISABLED = 3,
    /**
     * @generated from protobuf enum value: NORMAL = 4;
     */
    NORMAL = 4
}
/**
 * @generated from protobuf enum chatbot.BlockType
 */
export enum BlockType {
    /**
     * @generated from protobuf enum value: TEXT_RESPONSE = 0;
     */
    TEXT_RESPONSE = 0,
    /**
     * @generated from protobuf enum value: USER_INPUT = 1;
     */
    USER_INPUT = 1,
    /**
     * @generated from protobuf enum value: TYPING_DELAY = 2;
     */
    TYPING_DELAY = 2,
    /**
     * @generated from protobuf enum value: CONVERSATIONAL_FORM = 3;
     */
    CONVERSATIONAL_FORM = 3,
    /**
     * @generated from protobuf enum value: MEDIA_BLOCK = 4;
     */
    MEDIA_BLOCK = 4,
    /**
     * @generated from protobuf enum value: LINK_STORY = 5;
     */
    LINK_STORY = 5,
    /**
     * @generated from protobuf enum value: JSON_API = 6;
     */
    JSON_API = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class Position$Type extends MessageType<Position> {
    constructor() {
        super("chatbot.Position", [
            { no: 1, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Position>): Position {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<Position>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Position): Position {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double x */ 1:
                    message.x = reader.double();
                    break;
                case /* double y */ 2:
                    message.y = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Position, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit64).double(message.x);
        /* double y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit64).double(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.Position
 */
export const Position = new Position$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Connections$Type extends MessageType<Connections> {
    constructor() {
        super("chatbot.Connections", [
            { no: 1, name: "input", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "output", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Connections>): Connections {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.input = [];
        message.output = [];
        if (value !== undefined)
            reflectionMergePartial<Connections>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Connections): Connections {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string input */ 1:
                    message.input.push(reader.string());
                    break;
                case /* repeated string output */ 2:
                    message.output.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Connections, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string input = 1; */
        for (let i = 0; i < message.input.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.input[i]);
        /* repeated string output = 2; */
        for (let i = 0; i < message.output.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.output[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.Connections
 */
export const Connections = new Connections$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BaseBlock$Type extends MessageType<BaseBlock> {
    constructor() {
        super("chatbot.BaseBlock", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "CreatedDate", kind: "message", jsonName: "CreatedDate", T: () => Timestamp },
            { no: 3, name: "ToComponentType", kind: "scalar", jsonName: "ToComponentType", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ToComponentId", kind: "scalar", jsonName: "ToComponentId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BaseBlock>): BaseBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.toComponentType = "";
        message.toComponentId = "";
        if (value !== undefined)
            reflectionMergePartial<BaseBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseBlock): BaseBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp CreatedDate */ 2:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                case /* string ToComponentType */ 3:
                    message.toComponentType = reader.string();
                    break;
                case /* string ToComponentId */ 4:
                    message.toComponentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BaseBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp CreatedDate = 2; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string ToComponentType = 3; */
        if (message.toComponentType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toComponentType);
        /* string ToComponentId = 4; */
        if (message.toComponentId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toComponentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.BaseBlock
 */
export const BaseBlock = new BaseBlock$Type();
