/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: json_api_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./button";
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export class JsonApiBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            apiEndpoint?: string;
            requestType?: string;
            apiHeaders?: dependency_1.chatbot.ApiHeader[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("apiEndpoint" in data && data.apiEndpoint != undefined) {
                    this.apiEndpoint = data.apiEndpoint;
                }
                if ("requestType" in data && data.requestType != undefined) {
                    this.requestType = data.requestType;
                }
                if ("apiHeaders" in data && data.apiHeaders != undefined) {
                    this.apiHeaders = data.apiHeaders;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get apiEndpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set apiEndpoint(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestType() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set requestType(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get apiHeaders() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.chatbot.ApiHeader, 4) as dependency_1.chatbot.ApiHeader[];
        }
        set apiHeaders(value: dependency_1.chatbot.ApiHeader[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            type?: string;
            apiEndpoint?: string;
            requestType?: string;
            apiHeaders?: ReturnType<typeof dependency_1.chatbot.ApiHeader.prototype.toObject>[];
        }): JsonApiBlock {
            const message = new JsonApiBlock({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.apiEndpoint != null) {
                message.apiEndpoint = data.apiEndpoint;
            }
            if (data.requestType != null) {
                message.requestType = data.requestType;
            }
            if (data.apiHeaders != null) {
                message.apiHeaders = data.apiHeaders.map(item => dependency_1.chatbot.ApiHeader.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                apiEndpoint?: string;
                requestType?: string;
                apiHeaders?: ReturnType<typeof dependency_1.chatbot.ApiHeader.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.apiEndpoint != null) {
                data.apiEndpoint = this.apiEndpoint;
            }
            if (this.requestType != null) {
                data.requestType = this.requestType;
            }
            if (this.apiHeaders != null) {
                data.apiHeaders = this.apiHeaders.map((item: dependency_1.chatbot.ApiHeader) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.apiEndpoint.length)
                writer.writeString(2, this.apiEndpoint);
            if (this.requestType.length)
                writer.writeString(3, this.requestType);
            if (this.apiHeaders.length)
                writer.writeRepeatedMessage(4, this.apiHeaders, (item: dependency_1.chatbot.ApiHeader) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JsonApiBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JsonApiBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.apiEndpoint = reader.readString();
                        break;
                    case 3:
                        message.requestType = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.apiHeaders, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.chatbot.ApiHeader.deserialize(reader), dependency_1.chatbot.ApiHeader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JsonApiBlock {
            return JsonApiBlock.deserialize(bytes);
        }
    }
}
