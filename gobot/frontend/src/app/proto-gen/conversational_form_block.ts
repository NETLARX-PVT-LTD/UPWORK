/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: conversational_form_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export class FormField extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: string;
            required?: boolean;
            promptPhrase?: string;
            options?: string[];
            optionsText?: string;
            validation?: FormField.Validation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
                if ("promptPhrase" in data && data.promptPhrase != undefined) {
                    this.promptPhrase = data.promptPhrase;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("optionsText" in data && data.optionsText != undefined) {
                    this.optionsText = data.optionsText;
                }
                if ("validation" in data && data.validation != undefined) {
                    this.validation = data.validation;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set required(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get promptPhrase() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set promptPhrase(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get options() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set options(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get optionsText() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set optionsText(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get validation() {
            return pb_1.Message.getWrapperField(this, FormField.Validation, 7) as FormField.Validation;
        }
        set validation(value: FormField.Validation) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_validation() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            name?: string;
            type?: string;
            required?: boolean;
            promptPhrase?: string;
            options?: string[];
            optionsText?: string;
            validation?: ReturnType<typeof FormField.Validation.prototype.toObject>;
        }): FormField {
            const message = new FormField({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.required != null) {
                message.required = data.required;
            }
            if (data.promptPhrase != null) {
                message.promptPhrase = data.promptPhrase;
            }
            if (data.options != null) {
                message.options = data.options;
            }
            if (data.optionsText != null) {
                message.optionsText = data.optionsText;
            }
            if (data.validation != null) {
                message.validation = FormField.Validation.fromObject(data.validation);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: string;
                required?: boolean;
                promptPhrase?: string;
                options?: string[];
                optionsText?: string;
                validation?: ReturnType<typeof FormField.Validation.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.required != null) {
                data.required = this.required;
            }
            if (this.promptPhrase != null) {
                data.promptPhrase = this.promptPhrase;
            }
            if (this.options != null) {
                data.options = this.options;
            }
            if (this.optionsText != null) {
                data.optionsText = this.optionsText;
            }
            if (this.validation != null) {
                data.validation = this.validation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.required != false)
                writer.writeBool(3, this.required);
            if (this.promptPhrase.length)
                writer.writeString(4, this.promptPhrase);
            if (this.options.length)
                writer.writeRepeatedString(5, this.options);
            if (this.optionsText.length)
                writer.writeString(6, this.optionsText);
            if (this.has_validation)
                writer.writeMessage(7, this.validation, () => this.validation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FormField {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FormField();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.required = reader.readBool();
                        break;
                    case 4:
                        message.promptPhrase = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.optionsText = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.validation, () => message.validation = FormField.Validation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FormField {
            return FormField.deserialize(bytes);
        }
    }
    export namespace FormField {
        export class Validation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                minLength?: number;
                maxLength?: number;
                pattern?: string;
                min?: number;
                max?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("minLength" in data && data.minLength != undefined) {
                        this.minLength = data.minLength;
                    }
                    if ("maxLength" in data && data.maxLength != undefined) {
                        this.maxLength = data.maxLength;
                    }
                    if ("pattern" in data && data.pattern != undefined) {
                        this.pattern = data.pattern;
                    }
                    if ("min" in data && data.min != undefined) {
                        this.min = data.min;
                    }
                    if ("max" in data && data.max != undefined) {
                        this.max = data.max;
                    }
                }
            }
            get minLength() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set minLength(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get maxLength() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set maxLength(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get pattern() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set pattern(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get min() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set min(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get max() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set max(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                minLength?: number;
                maxLength?: number;
                pattern?: string;
                min?: number;
                max?: number;
            }): Validation {
                const message = new Validation({});
                if (data.minLength != null) {
                    message.minLength = data.minLength;
                }
                if (data.maxLength != null) {
                    message.maxLength = data.maxLength;
                }
                if (data.pattern != null) {
                    message.pattern = data.pattern;
                }
                if (data.min != null) {
                    message.min = data.min;
                }
                if (data.max != null) {
                    message.max = data.max;
                }
                return message;
            }
            toObject() {
                const data: {
                    minLength?: number;
                    maxLength?: number;
                    pattern?: string;
                    min?: number;
                    max?: number;
                } = {};
                if (this.minLength != null) {
                    data.minLength = this.minLength;
                }
                if (this.maxLength != null) {
                    data.maxLength = this.maxLength;
                }
                if (this.pattern != null) {
                    data.pattern = this.pattern;
                }
                if (this.min != null) {
                    data.min = this.min;
                }
                if (this.max != null) {
                    data.max = this.max;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.minLength != 0)
                    writer.writeInt32(1, this.minLength);
                if (this.maxLength != 0)
                    writer.writeInt32(2, this.maxLength);
                if (this.pattern.length)
                    writer.writeString(3, this.pattern);
                if (this.min != 0)
                    writer.writeDouble(4, this.min);
                if (this.max != 0)
                    writer.writeDouble(5, this.max);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Validation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.minLength = reader.readInt32();
                            break;
                        case 2:
                            message.maxLength = reader.readInt32();
                            break;
                        case 3:
                            message.pattern = reader.readString();
                            break;
                        case 4:
                            message.min = reader.readDouble();
                            break;
                        case 5:
                            message.max = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Validation {
                return Validation.deserialize(bytes);
            }
        }
    }
    export class ConversationalFormBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            formId?: string;
            formName?: string;
            webhookUrl?: string;
            sendEmailNotification?: boolean;
            notificationEmail?: string;
            formFields?: FormField[];
            showAsInlineForm?: boolean;
            renderFormResponses?: boolean;
            allowMultipleSubmission?: boolean;
            multipleSubmissionMessage?: string;
            allowExitForm?: boolean;
            exitFormMessage?: string;
            successResponseType?: string;
            successRedirectStoryId?: string;
            validateEmail?: boolean;
            validatePhone?: boolean;
            spamProtection?: boolean;
            requireCompletion?: boolean;
            successMessage?: string;
            redirectUrl?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("formId" in data && data.formId != undefined) {
                    this.formId = data.formId;
                }
                if ("formName" in data && data.formName != undefined) {
                    this.formName = data.formName;
                }
                if ("webhookUrl" in data && data.webhookUrl != undefined) {
                    this.webhookUrl = data.webhookUrl;
                }
                if ("sendEmailNotification" in data && data.sendEmailNotification != undefined) {
                    this.sendEmailNotification = data.sendEmailNotification;
                }
                if ("notificationEmail" in data && data.notificationEmail != undefined) {
                    this.notificationEmail = data.notificationEmail;
                }
                if ("formFields" in data && data.formFields != undefined) {
                    this.formFields = data.formFields;
                }
                if ("showAsInlineForm" in data && data.showAsInlineForm != undefined) {
                    this.showAsInlineForm = data.showAsInlineForm;
                }
                if ("renderFormResponses" in data && data.renderFormResponses != undefined) {
                    this.renderFormResponses = data.renderFormResponses;
                }
                if ("allowMultipleSubmission" in data && data.allowMultipleSubmission != undefined) {
                    this.allowMultipleSubmission = data.allowMultipleSubmission;
                }
                if ("multipleSubmissionMessage" in data && data.multipleSubmissionMessage != undefined) {
                    this.multipleSubmissionMessage = data.multipleSubmissionMessage;
                }
                if ("allowExitForm" in data && data.allowExitForm != undefined) {
                    this.allowExitForm = data.allowExitForm;
                }
                if ("exitFormMessage" in data && data.exitFormMessage != undefined) {
                    this.exitFormMessage = data.exitFormMessage;
                }
                if ("successResponseType" in data && data.successResponseType != undefined) {
                    this.successResponseType = data.successResponseType;
                }
                if ("successRedirectStoryId" in data && data.successRedirectStoryId != undefined) {
                    this.successRedirectStoryId = data.successRedirectStoryId;
                }
                if ("validateEmail" in data && data.validateEmail != undefined) {
                    this.validateEmail = data.validateEmail;
                }
                if ("validatePhone" in data && data.validatePhone != undefined) {
                    this.validatePhone = data.validatePhone;
                }
                if ("spamProtection" in data && data.spamProtection != undefined) {
                    this.spamProtection = data.spamProtection;
                }
                if ("requireCompletion" in data && data.requireCompletion != undefined) {
                    this.requireCompletion = data.requireCompletion;
                }
                if ("successMessage" in data && data.successMessage != undefined) {
                    this.successMessage = data.successMessage;
                }
                if ("redirectUrl" in data && data.redirectUrl != undefined) {
                    this.redirectUrl = data.redirectUrl;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get formId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set formId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get formName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set formName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get webhookUrl() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set webhookUrl(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get sendEmailNotification() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set sendEmailNotification(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get notificationEmail() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set notificationEmail(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get formFields() {
            return pb_1.Message.getRepeatedWrapperField(this, FormField, 7) as FormField[];
        }
        set formFields(value: FormField[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get showAsInlineForm() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set showAsInlineForm(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get renderFormResponses() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set renderFormResponses(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get allowMultipleSubmission() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set allowMultipleSubmission(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get multipleSubmissionMessage() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set multipleSubmissionMessage(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get allowExitForm() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set allowExitForm(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get exitFormMessage() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set exitFormMessage(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get successResponseType() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set successResponseType(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get successRedirectStoryId() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set successRedirectStoryId(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get validateEmail() {
            return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
        }
        set validateEmail(value: boolean) {
            pb_1.Message.setField(this, 16, value);
        }
        get validatePhone() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set validatePhone(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get spamProtection() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set spamProtection(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get requireCompletion() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set requireCompletion(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get successMessage() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set successMessage(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get redirectUrl() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set redirectUrl(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            type?: string;
            formId?: string;
            formName?: string;
            webhookUrl?: string;
            sendEmailNotification?: boolean;
            notificationEmail?: string;
            formFields?: ReturnType<typeof FormField.prototype.toObject>[];
            showAsInlineForm?: boolean;
            renderFormResponses?: boolean;
            allowMultipleSubmission?: boolean;
            multipleSubmissionMessage?: string;
            allowExitForm?: boolean;
            exitFormMessage?: string;
            successResponseType?: string;
            successRedirectStoryId?: string;
            validateEmail?: boolean;
            validatePhone?: boolean;
            spamProtection?: boolean;
            requireCompletion?: boolean;
            successMessage?: string;
            redirectUrl?: string;
        }): ConversationalFormBlock {
            const message = new ConversationalFormBlock({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.formId != null) {
                message.formId = data.formId;
            }
            if (data.formName != null) {
                message.formName = data.formName;
            }
            if (data.webhookUrl != null) {
                message.webhookUrl = data.webhookUrl;
            }
            if (data.sendEmailNotification != null) {
                message.sendEmailNotification = data.sendEmailNotification;
            }
            if (data.notificationEmail != null) {
                message.notificationEmail = data.notificationEmail;
            }
            if (data.formFields != null) {
                message.formFields = data.formFields.map(item => FormField.fromObject(item));
            }
            if (data.showAsInlineForm != null) {
                message.showAsInlineForm = data.showAsInlineForm;
            }
            if (data.renderFormResponses != null) {
                message.renderFormResponses = data.renderFormResponses;
            }
            if (data.allowMultipleSubmission != null) {
                message.allowMultipleSubmission = data.allowMultipleSubmission;
            }
            if (data.multipleSubmissionMessage != null) {
                message.multipleSubmissionMessage = data.multipleSubmissionMessage;
            }
            if (data.allowExitForm != null) {
                message.allowExitForm = data.allowExitForm;
            }
            if (data.exitFormMessage != null) {
                message.exitFormMessage = data.exitFormMessage;
            }
            if (data.successResponseType != null) {
                message.successResponseType = data.successResponseType;
            }
            if (data.successRedirectStoryId != null) {
                message.successRedirectStoryId = data.successRedirectStoryId;
            }
            if (data.validateEmail != null) {
                message.validateEmail = data.validateEmail;
            }
            if (data.validatePhone != null) {
                message.validatePhone = data.validatePhone;
            }
            if (data.spamProtection != null) {
                message.spamProtection = data.spamProtection;
            }
            if (data.requireCompletion != null) {
                message.requireCompletion = data.requireCompletion;
            }
            if (data.successMessage != null) {
                message.successMessage = data.successMessage;
            }
            if (data.redirectUrl != null) {
                message.redirectUrl = data.redirectUrl;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                formId?: string;
                formName?: string;
                webhookUrl?: string;
                sendEmailNotification?: boolean;
                notificationEmail?: string;
                formFields?: ReturnType<typeof FormField.prototype.toObject>[];
                showAsInlineForm?: boolean;
                renderFormResponses?: boolean;
                allowMultipleSubmission?: boolean;
                multipleSubmissionMessage?: string;
                allowExitForm?: boolean;
                exitFormMessage?: string;
                successResponseType?: string;
                successRedirectStoryId?: string;
                validateEmail?: boolean;
                validatePhone?: boolean;
                spamProtection?: boolean;
                requireCompletion?: boolean;
                successMessage?: string;
                redirectUrl?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.formId != null) {
                data.formId = this.formId;
            }
            if (this.formName != null) {
                data.formName = this.formName;
            }
            if (this.webhookUrl != null) {
                data.webhookUrl = this.webhookUrl;
            }
            if (this.sendEmailNotification != null) {
                data.sendEmailNotification = this.sendEmailNotification;
            }
            if (this.notificationEmail != null) {
                data.notificationEmail = this.notificationEmail;
            }
            if (this.formFields != null) {
                data.formFields = this.formFields.map((item: FormField) => item.toObject());
            }
            if (this.showAsInlineForm != null) {
                data.showAsInlineForm = this.showAsInlineForm;
            }
            if (this.renderFormResponses != null) {
                data.renderFormResponses = this.renderFormResponses;
            }
            if (this.allowMultipleSubmission != null) {
                data.allowMultipleSubmission = this.allowMultipleSubmission;
            }
            if (this.multipleSubmissionMessage != null) {
                data.multipleSubmissionMessage = this.multipleSubmissionMessage;
            }
            if (this.allowExitForm != null) {
                data.allowExitForm = this.allowExitForm;
            }
            if (this.exitFormMessage != null) {
                data.exitFormMessage = this.exitFormMessage;
            }
            if (this.successResponseType != null) {
                data.successResponseType = this.successResponseType;
            }
            if (this.successRedirectStoryId != null) {
                data.successRedirectStoryId = this.successRedirectStoryId;
            }
            if (this.validateEmail != null) {
                data.validateEmail = this.validateEmail;
            }
            if (this.validatePhone != null) {
                data.validatePhone = this.validatePhone;
            }
            if (this.spamProtection != null) {
                data.spamProtection = this.spamProtection;
            }
            if (this.requireCompletion != null) {
                data.requireCompletion = this.requireCompletion;
            }
            if (this.successMessage != null) {
                data.successMessage = this.successMessage;
            }
            if (this.redirectUrl != null) {
                data.redirectUrl = this.redirectUrl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.formId.length)
                writer.writeString(2, this.formId);
            if (this.formName.length)
                writer.writeString(3, this.formName);
            if (this.webhookUrl.length)
                writer.writeString(4, this.webhookUrl);
            if (this.sendEmailNotification != false)
                writer.writeBool(5, this.sendEmailNotification);
            if (this.notificationEmail.length)
                writer.writeString(6, this.notificationEmail);
            if (this.formFields.length)
                writer.writeRepeatedMessage(7, this.formFields, (item: FormField) => item.serialize(writer));
            if (this.showAsInlineForm != false)
                writer.writeBool(8, this.showAsInlineForm);
            if (this.renderFormResponses != false)
                writer.writeBool(9, this.renderFormResponses);
            if (this.allowMultipleSubmission != false)
                writer.writeBool(10, this.allowMultipleSubmission);
            if (this.multipleSubmissionMessage.length)
                writer.writeString(11, this.multipleSubmissionMessage);
            if (this.allowExitForm != false)
                writer.writeBool(12, this.allowExitForm);
            if (this.exitFormMessage.length)
                writer.writeString(13, this.exitFormMessage);
            if (this.successResponseType.length)
                writer.writeString(14, this.successResponseType);
            if (this.successRedirectStoryId.length)
                writer.writeString(15, this.successRedirectStoryId);
            if (this.validateEmail != false)
                writer.writeBool(16, this.validateEmail);
            if (this.validatePhone != false)
                writer.writeBool(17, this.validatePhone);
            if (this.spamProtection != false)
                writer.writeBool(18, this.spamProtection);
            if (this.requireCompletion != false)
                writer.writeBool(19, this.requireCompletion);
            if (this.successMessage.length)
                writer.writeString(20, this.successMessage);
            if (this.redirectUrl.length)
                writer.writeString(21, this.redirectUrl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConversationalFormBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConversationalFormBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.formId = reader.readString();
                        break;
                    case 3:
                        message.formName = reader.readString();
                        break;
                    case 4:
                        message.webhookUrl = reader.readString();
                        break;
                    case 5:
                        message.sendEmailNotification = reader.readBool();
                        break;
                    case 6:
                        message.notificationEmail = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.formFields, () => pb_1.Message.addToRepeatedWrapperField(message, 7, FormField.deserialize(reader), FormField));
                        break;
                    case 8:
                        message.showAsInlineForm = reader.readBool();
                        break;
                    case 9:
                        message.renderFormResponses = reader.readBool();
                        break;
                    case 10:
                        message.allowMultipleSubmission = reader.readBool();
                        break;
                    case 11:
                        message.multipleSubmissionMessage = reader.readString();
                        break;
                    case 12:
                        message.allowExitForm = reader.readBool();
                        break;
                    case 13:
                        message.exitFormMessage = reader.readString();
                        break;
                    case 14:
                        message.successResponseType = reader.readString();
                        break;
                    case 15:
                        message.successRedirectStoryId = reader.readString();
                        break;
                    case 16:
                        message.validateEmail = reader.readBool();
                        break;
                    case 17:
                        message.validatePhone = reader.readBool();
                        break;
                    case 18:
                        message.spamProtection = reader.readBool();
                        break;
                    case 19:
                        message.requireCompletion = reader.readBool();
                        break;
                    case 20:
                        message.successMessage = reader.readString();
                        break;
                    case 21:
                        message.redirectUrl = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConversationalFormBlock {
            return ConversationalFormBlock.deserialize(bytes);
        }
    }
}
