// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "conversational_form_block.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message chatbot.FormField
 */
export interface FormField {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string type = 2
     */
    type: string;
    /**
     * @generated from protobuf field: bool required = 3
     */
    required: boolean;
    /**
     * @generated from protobuf field: string promptPhrase = 4
     */
    promptPhrase: string;
    /**
     * @generated from protobuf field: repeated string options = 5
     */
    options: string[];
    /**
     * @generated from protobuf field: string optionsText = 6
     */
    optionsText: string;
    /**
     * @generated from protobuf field: chatbot.FormField.Validation validation = 7
     */
    validation?: FormField_Validation;
}
/**
 * @generated from protobuf message chatbot.FormField.Validation
 */
export interface FormField_Validation {
    /**
     * @generated from protobuf field: int32 minLength = 1
     */
    minLength: number;
    /**
     * @generated from protobuf field: int32 maxLength = 2
     */
    maxLength: number;
    /**
     * @generated from protobuf field: string pattern = 3
     */
    pattern: string;
    /**
     * @generated from protobuf field: double min = 4
     */
    min: number;
    /**
     * @generated from protobuf field: double max = 5
     */
    max: number;
}
/**
 * @generated from protobuf message chatbot.ConversationalFormBlock
 */
export interface ConversationalFormBlock {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string; // "conversationalForm"
    /**
     * @generated from protobuf field: string formId = 2
     */
    formId: string;
    /**
     * @generated from protobuf field: string formName = 3
     */
    formName: string;
    /**
     * @generated from protobuf field: string webhookUrl = 4
     */
    webhookUrl: string;
    /**
     * @generated from protobuf field: bool sendEmailNotification = 5
     */
    sendEmailNotification: boolean;
    /**
     * @generated from protobuf field: string notificationEmail = 6
     */
    notificationEmail: string;
    /**
     * @generated from protobuf field: repeated chatbot.FormField formFields = 7
     */
    formFields: FormField[];
    /**
     * @generated from protobuf field: bool showAsInlineForm = 8
     */
    showAsInlineForm: boolean;
    /**
     * @generated from protobuf field: bool renderFormResponses = 9
     */
    renderFormResponses: boolean;
    /**
     * @generated from protobuf field: bool allowMultipleSubmission = 10
     */
    allowMultipleSubmission: boolean;
    /**
     * @generated from protobuf field: string multipleSubmissionMessage = 11
     */
    multipleSubmissionMessage: string;
    /**
     * @generated from protobuf field: bool allowExitForm = 12
     */
    allowExitForm: boolean;
    /**
     * @generated from protobuf field: string exitFormMessage = 13
     */
    exitFormMessage: string;
    /**
     * @generated from protobuf field: string successResponseType = 14
     */
    successResponseType: string; // "textMessage" | "story"
    /**
     * @generated from protobuf field: string successRedirectStoryId = 15
     */
    successRedirectStoryId: string;
    /**
     * @generated from protobuf field: bool validateEmail = 16
     */
    validateEmail: boolean;
    /**
     * @generated from protobuf field: bool validatePhone = 17
     */
    validatePhone: boolean;
    /**
     * @generated from protobuf field: bool spamProtection = 18
     */
    spamProtection: boolean;
    /**
     * @generated from protobuf field: bool requireCompletion = 19
     */
    requireCompletion: boolean;
    /**
     * @generated from protobuf field: string successMessage = 20
     */
    successMessage: string;
    /**
     * @generated from protobuf field: string redirectUrl = 21
     */
    redirectUrl: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FormField$Type extends MessageType<FormField> {
    constructor() {
        super("chatbot.FormField", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "promptPhrase", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "optionsText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "validation", kind: "message", T: () => FormField_Validation }
        ]);
    }
    create(value?: PartialMessage<FormField>): FormField {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = "";
        message.required = false;
        message.promptPhrase = "";
        message.options = [];
        message.optionsText = "";
        if (value !== undefined)
            reflectionMergePartial<FormField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FormField): FormField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* bool required */ 3:
                    message.required = reader.bool();
                    break;
                case /* string promptPhrase */ 4:
                    message.promptPhrase = reader.string();
                    break;
                case /* repeated string options */ 5:
                    message.options.push(reader.string());
                    break;
                case /* string optionsText */ 6:
                    message.optionsText = reader.string();
                    break;
                case /* chatbot.FormField.Validation validation */ 7:
                    message.validation = FormField_Validation.internalBinaryRead(reader, reader.uint32(), options, message.validation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FormField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* bool required = 3; */
        if (message.required !== false)
            writer.tag(3, WireType.Varint).bool(message.required);
        /* string promptPhrase = 4; */
        if (message.promptPhrase !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.promptPhrase);
        /* repeated string options = 5; */
        for (let i = 0; i < message.options.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.options[i]);
        /* string optionsText = 6; */
        if (message.optionsText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.optionsText);
        /* chatbot.FormField.Validation validation = 7; */
        if (message.validation)
            FormField_Validation.internalBinaryWrite(message.validation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.FormField
 */
export const FormField = new FormField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FormField_Validation$Type extends MessageType<FormField_Validation> {
    constructor() {
        super("chatbot.FormField.Validation", [
            { no: 1, name: "minLength", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "maxLength", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "min", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "max", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<FormField_Validation>): FormField_Validation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.minLength = 0;
        message.maxLength = 0;
        message.pattern = "";
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<FormField_Validation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FormField_Validation): FormField_Validation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 minLength */ 1:
                    message.minLength = reader.int32();
                    break;
                case /* int32 maxLength */ 2:
                    message.maxLength = reader.int32();
                    break;
                case /* string pattern */ 3:
                    message.pattern = reader.string();
                    break;
                case /* double min */ 4:
                    message.min = reader.double();
                    break;
                case /* double max */ 5:
                    message.max = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FormField_Validation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 minLength = 1; */
        if (message.minLength !== 0)
            writer.tag(1, WireType.Varint).int32(message.minLength);
        /* int32 maxLength = 2; */
        if (message.maxLength !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxLength);
        /* string pattern = 3; */
        if (message.pattern !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pattern);
        /* double min = 4; */
        if (message.min !== 0)
            writer.tag(4, WireType.Bit64).double(message.min);
        /* double max = 5; */
        if (message.max !== 0)
            writer.tag(5, WireType.Bit64).double(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.FormField.Validation
 */
export const FormField_Validation = new FormField_Validation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConversationalFormBlock$Type extends MessageType<ConversationalFormBlock> {
    constructor() {
        super("chatbot.ConversationalFormBlock", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "formId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "formName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "webhookUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sendEmailNotification", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "notificationEmail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "formFields", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FormField },
            { no: 8, name: "showAsInlineForm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "renderFormResponses", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "allowMultipleSubmission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "multipleSubmissionMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "allowExitForm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "exitFormMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "successResponseType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "successRedirectStoryId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "validateEmail", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "validatePhone", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "spamProtection", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "requireCompletion", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "successMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "redirectUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConversationalFormBlock>): ConversationalFormBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.formId = "";
        message.formName = "";
        message.webhookUrl = "";
        message.sendEmailNotification = false;
        message.notificationEmail = "";
        message.formFields = [];
        message.showAsInlineForm = false;
        message.renderFormResponses = false;
        message.allowMultipleSubmission = false;
        message.multipleSubmissionMessage = "";
        message.allowExitForm = false;
        message.exitFormMessage = "";
        message.successResponseType = "";
        message.successRedirectStoryId = "";
        message.validateEmail = false;
        message.validatePhone = false;
        message.spamProtection = false;
        message.requireCompletion = false;
        message.successMessage = "";
        message.redirectUrl = "";
        if (value !== undefined)
            reflectionMergePartial<ConversationalFormBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConversationalFormBlock): ConversationalFormBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string formId */ 2:
                    message.formId = reader.string();
                    break;
                case /* string formName */ 3:
                    message.formName = reader.string();
                    break;
                case /* string webhookUrl */ 4:
                    message.webhookUrl = reader.string();
                    break;
                case /* bool sendEmailNotification */ 5:
                    message.sendEmailNotification = reader.bool();
                    break;
                case /* string notificationEmail */ 6:
                    message.notificationEmail = reader.string();
                    break;
                case /* repeated chatbot.FormField formFields */ 7:
                    message.formFields.push(FormField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool showAsInlineForm */ 8:
                    message.showAsInlineForm = reader.bool();
                    break;
                case /* bool renderFormResponses */ 9:
                    message.renderFormResponses = reader.bool();
                    break;
                case /* bool allowMultipleSubmission */ 10:
                    message.allowMultipleSubmission = reader.bool();
                    break;
                case /* string multipleSubmissionMessage */ 11:
                    message.multipleSubmissionMessage = reader.string();
                    break;
                case /* bool allowExitForm */ 12:
                    message.allowExitForm = reader.bool();
                    break;
                case /* string exitFormMessage */ 13:
                    message.exitFormMessage = reader.string();
                    break;
                case /* string successResponseType */ 14:
                    message.successResponseType = reader.string();
                    break;
                case /* string successRedirectStoryId */ 15:
                    message.successRedirectStoryId = reader.string();
                    break;
                case /* bool validateEmail */ 16:
                    message.validateEmail = reader.bool();
                    break;
                case /* bool validatePhone */ 17:
                    message.validatePhone = reader.bool();
                    break;
                case /* bool spamProtection */ 18:
                    message.spamProtection = reader.bool();
                    break;
                case /* bool requireCompletion */ 19:
                    message.requireCompletion = reader.bool();
                    break;
                case /* string successMessage */ 20:
                    message.successMessage = reader.string();
                    break;
                case /* string redirectUrl */ 21:
                    message.redirectUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConversationalFormBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string formId = 2; */
        if (message.formId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.formId);
        /* string formName = 3; */
        if (message.formName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.formName);
        /* string webhookUrl = 4; */
        if (message.webhookUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.webhookUrl);
        /* bool sendEmailNotification = 5; */
        if (message.sendEmailNotification !== false)
            writer.tag(5, WireType.Varint).bool(message.sendEmailNotification);
        /* string notificationEmail = 6; */
        if (message.notificationEmail !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.notificationEmail);
        /* repeated chatbot.FormField formFields = 7; */
        for (let i = 0; i < message.formFields.length; i++)
            FormField.internalBinaryWrite(message.formFields[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bool showAsInlineForm = 8; */
        if (message.showAsInlineForm !== false)
            writer.tag(8, WireType.Varint).bool(message.showAsInlineForm);
        /* bool renderFormResponses = 9; */
        if (message.renderFormResponses !== false)
            writer.tag(9, WireType.Varint).bool(message.renderFormResponses);
        /* bool allowMultipleSubmission = 10; */
        if (message.allowMultipleSubmission !== false)
            writer.tag(10, WireType.Varint).bool(message.allowMultipleSubmission);
        /* string multipleSubmissionMessage = 11; */
        if (message.multipleSubmissionMessage !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.multipleSubmissionMessage);
        /* bool allowExitForm = 12; */
        if (message.allowExitForm !== false)
            writer.tag(12, WireType.Varint).bool(message.allowExitForm);
        /* string exitFormMessage = 13; */
        if (message.exitFormMessage !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.exitFormMessage);
        /* string successResponseType = 14; */
        if (message.successResponseType !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.successResponseType);
        /* string successRedirectStoryId = 15; */
        if (message.successRedirectStoryId !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.successRedirectStoryId);
        /* bool validateEmail = 16; */
        if (message.validateEmail !== false)
            writer.tag(16, WireType.Varint).bool(message.validateEmail);
        /* bool validatePhone = 17; */
        if (message.validatePhone !== false)
            writer.tag(17, WireType.Varint).bool(message.validatePhone);
        /* bool spamProtection = 18; */
        if (message.spamProtection !== false)
            writer.tag(18, WireType.Varint).bool(message.spamProtection);
        /* bool requireCompletion = 19; */
        if (message.requireCompletion !== false)
            writer.tag(19, WireType.Varint).bool(message.requireCompletion);
        /* string successMessage = 20; */
        if (message.successMessage !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.successMessage);
        /* string redirectUrl = 21; */
        if (message.redirectUrl !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.redirectUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.ConversationalFormBlock
 */
export const ConversationalFormBlock = new ConversationalFormBlock$Type();
