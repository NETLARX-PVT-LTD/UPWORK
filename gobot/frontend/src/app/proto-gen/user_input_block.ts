// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "user_input_block.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Helper message to represent a single group (or list) of keywords
 *
 * @generated from protobuf message chatbot.KeywordGroup
 */
export interface KeywordGroup {
    /**
     * @generated from protobuf field: repeated string keywords = 1
     */
    keywords: string[];
}
/**
 * @generated from protobuf message chatbot.UserInputBlock
 */
export interface UserInputBlock {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string; // "userInput"
    /**
     * @generated from protobuf field: chatbot.UserInputSubType subType = 2
     */
    subType: UserInputSubType;
    /**
     * @generated from protobuf field: repeated string keywords = 3
     */
    keywords: string[];
    /**
     * This is now a list of KeywordGroup messages
     *
     * @generated from protobuf field: repeated chatbot.KeywordGroup keywordGroups = 4
     */
    keywordGroups: KeywordGroup[];
    /**
     * @generated from protobuf field: string phraseText = 5
     */
    phraseText: string;
    /**
     * @generated from protobuf field: string customMessage = 6
     */
    customMessage: string;
    /**
     * @generated from protobuf field: string datastoreVariable = 7
     */
    datastoreVariable: string;
}
/**
 * @generated from protobuf enum chatbot.UserInputSubType
 */
export enum UserInputSubType {
    /**
     * It's good practice for the zero value to mean "unspecified"
     *
     * @generated from protobuf enum value: USER_INPUT_SUB_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: USER_INPUT_SUB_TYPE_TEXT = 1;
     */
    TEXT = 1,
    /**
     * @generated from protobuf enum value: USER_INPUT_SUB_TYPE_NUMBER = 2;
     */
    NUMBER = 2,
    /**
     * @generated from protobuf enum value: USER_INPUT_SUB_TYPE_EMAIL = 3;
     */
    EMAIL = 3,
    /**
     * @generated from protobuf enum value: USER_INPUT_SUB_TYPE_PHONE = 4;
     */
    PHONE = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class KeywordGroup$Type extends MessageType<KeywordGroup> {
    constructor() {
        super("chatbot.KeywordGroup", [
            { no: 1, name: "keywords", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KeywordGroup>): KeywordGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keywords = [];
        if (value !== undefined)
            reflectionMergePartial<KeywordGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeywordGroup): KeywordGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string keywords */ 1:
                    message.keywords.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeywordGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string keywords = 1; */
        for (let i = 0; i < message.keywords.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.keywords[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.KeywordGroup
 */
export const KeywordGroup = new KeywordGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInputBlock$Type extends MessageType<UserInputBlock> {
    constructor() {
        super("chatbot.UserInputBlock", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subType", kind: "enum", T: () => ["chatbot.UserInputSubType", UserInputSubType, "USER_INPUT_SUB_TYPE_"] },
            { no: 3, name: "keywords", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "keywordGroups", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => KeywordGroup },
            { no: 5, name: "phraseText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "customMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "datastoreVariable", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserInputBlock>): UserInputBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.subType = 0;
        message.keywords = [];
        message.keywordGroups = [];
        message.phraseText = "";
        message.customMessage = "";
        message.datastoreVariable = "";
        if (value !== undefined)
            reflectionMergePartial<UserInputBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInputBlock): UserInputBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* chatbot.UserInputSubType subType */ 2:
                    message.subType = reader.int32();
                    break;
                case /* repeated string keywords */ 3:
                    message.keywords.push(reader.string());
                    break;
                case /* repeated chatbot.KeywordGroup keywordGroups */ 4:
                    message.keywordGroups.push(KeywordGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string phraseText */ 5:
                    message.phraseText = reader.string();
                    break;
                case /* string customMessage */ 6:
                    message.customMessage = reader.string();
                    break;
                case /* string datastoreVariable */ 7:
                    message.datastoreVariable = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInputBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* chatbot.UserInputSubType subType = 2; */
        if (message.subType !== 0)
            writer.tag(2, WireType.Varint).int32(message.subType);
        /* repeated string keywords = 3; */
        for (let i = 0; i < message.keywords.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.keywords[i]);
        /* repeated chatbot.KeywordGroup keywordGroups = 4; */
        for (let i = 0; i < message.keywordGroups.length; i++)
            KeywordGroup.internalBinaryWrite(message.keywordGroups[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string phraseText = 5; */
        if (message.phraseText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.phraseText);
        /* string customMessage = 6; */
        if (message.customMessage !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.customMessage);
        /* string datastoreVariable = 7; */
        if (message.datastoreVariable !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.datastoreVariable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.UserInputBlock
 */
export const UserInputBlock = new UserInputBlock$Type();
