/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: user_input_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export enum UserInputSubType {
        USER_INPUT_SUB_TYPE_UNSPECIFIED = 0,
        USER_INPUT_SUB_TYPE_TEXT = 1,
        USER_INPUT_SUB_TYPE_NUMBER = 2,
        USER_INPUT_SUB_TYPE_EMAIL = 3,
        USER_INPUT_SUB_TYPE_PHONE = 4
    }
    export class KeywordGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keywords?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keywords" in data && data.keywords != undefined) {
                    this.keywords = data.keywords;
                }
            }
        }
        get keywords() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set keywords(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            keywords?: string[];
        }): KeywordGroup {
            const message = new KeywordGroup({});
            if (data.keywords != null) {
                message.keywords = data.keywords;
            }
            return message;
        }
        toObject() {
            const data: {
                keywords?: string[];
            } = {};
            if (this.keywords != null) {
                data.keywords = this.keywords;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keywords.length)
                writer.writeRepeatedString(1, this.keywords);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeywordGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeywordGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeywordGroup {
            return KeywordGroup.deserialize(bytes);
        }
    }
    export class UserInputBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            subType?: UserInputSubType;
            keywords?: string[];
            keywordGroups?: KeywordGroup[];
            phraseText?: string;
            customMessage?: string;
            datastoreVariable?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("subType" in data && data.subType != undefined) {
                    this.subType = data.subType;
                }
                if ("keywords" in data && data.keywords != undefined) {
                    this.keywords = data.keywords;
                }
                if ("keywordGroups" in data && data.keywordGroups != undefined) {
                    this.keywordGroups = data.keywordGroups;
                }
                if ("phraseText" in data && data.phraseText != undefined) {
                    this.phraseText = data.phraseText;
                }
                if ("customMessage" in data && data.customMessage != undefined) {
                    this.customMessage = data.customMessage;
                }
                if ("datastoreVariable" in data && data.datastoreVariable != undefined) {
                    this.datastoreVariable = data.datastoreVariable;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get subType() {
            return pb_1.Message.getFieldWithDefault(this, 2, UserInputSubType.USER_INPUT_SUB_TYPE_UNSPECIFIED) as UserInputSubType;
        }
        set subType(value: UserInputSubType) {
            pb_1.Message.setField(this, 2, value);
        }
        get keywords() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set keywords(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get keywordGroups() {
            return pb_1.Message.getRepeatedWrapperField(this, KeywordGroup, 4) as KeywordGroup[];
        }
        set keywordGroups(value: KeywordGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get phraseText() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set phraseText(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get customMessage() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set customMessage(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get datastoreVariable() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set datastoreVariable(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            type?: string;
            subType?: UserInputSubType;
            keywords?: string[];
            keywordGroups?: ReturnType<typeof KeywordGroup.prototype.toObject>[];
            phraseText?: string;
            customMessage?: string;
            datastoreVariable?: string;
        }): UserInputBlock {
            const message = new UserInputBlock({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.subType != null) {
                message.subType = data.subType;
            }
            if (data.keywords != null) {
                message.keywords = data.keywords;
            }
            if (data.keywordGroups != null) {
                message.keywordGroups = data.keywordGroups.map(item => KeywordGroup.fromObject(item));
            }
            if (data.phraseText != null) {
                message.phraseText = data.phraseText;
            }
            if (data.customMessage != null) {
                message.customMessage = data.customMessage;
            }
            if (data.datastoreVariable != null) {
                message.datastoreVariable = data.datastoreVariable;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                subType?: UserInputSubType;
                keywords?: string[];
                keywordGroups?: ReturnType<typeof KeywordGroup.prototype.toObject>[];
                phraseText?: string;
                customMessage?: string;
                datastoreVariable?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.subType != null) {
                data.subType = this.subType;
            }
            if (this.keywords != null) {
                data.keywords = this.keywords;
            }
            if (this.keywordGroups != null) {
                data.keywordGroups = this.keywordGroups.map((item: KeywordGroup) => item.toObject());
            }
            if (this.phraseText != null) {
                data.phraseText = this.phraseText;
            }
            if (this.customMessage != null) {
                data.customMessage = this.customMessage;
            }
            if (this.datastoreVariable != null) {
                data.datastoreVariable = this.datastoreVariable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.subType != UserInputSubType.USER_INPUT_SUB_TYPE_UNSPECIFIED)
                writer.writeEnum(2, this.subType);
            if (this.keywords.length)
                writer.writeRepeatedString(3, this.keywords);
            if (this.keywordGroups.length)
                writer.writeRepeatedMessage(4, this.keywordGroups, (item: KeywordGroup) => item.serialize(writer));
            if (this.phraseText.length)
                writer.writeString(5, this.phraseText);
            if (this.customMessage.length)
                writer.writeString(6, this.customMessage);
            if (this.datastoreVariable.length)
                writer.writeString(7, this.datastoreVariable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInputBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInputBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.subType = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.keywordGroups, () => pb_1.Message.addToRepeatedWrapperField(message, 4, KeywordGroup.deserialize(reader), KeywordGroup));
                        break;
                    case 5:
                        message.phraseText = reader.readString();
                        break;
                    case 6:
                        message.customMessage = reader.readString();
                        break;
                    case 7:
                        message.datastoreVariable = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInputBlock {
            return UserInputBlock.deserialize(bytes);
        }
    }
}
