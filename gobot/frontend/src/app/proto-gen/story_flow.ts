// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "story_flow.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { JsonApiBlock } from "./json_api_block";
import { TypingDelayBlock } from "./typing_delay_block";
import { ConversationalFormBlock } from "./conversational_form_block";
import { LinkStoryBlock } from "./link_story_block";
import { MediaBlock } from "./media_block";
import { TextResponseBlock } from "./text_response_block";
import { UserInputBlock } from "./user_input_block";
/**
 * Represents a single block on the canvas
 *
 * @generated from protobuf message chatbot.Block
 */
export interface Block {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2
     */
    type: string; // Common properties like position could go here if you want
    // float x = 3;
    // float y = 4;
    /**
     * This 'oneof' ensures a block can only be ONE of the following types
     *
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "userInput";
        /**
         * @generated from protobuf field: chatbot.UserInputBlock user_input = 5
         */
        userInput: UserInputBlock;
    } | {
        oneofKind: "textResponse";
        /**
         * @generated from protobuf field: chatbot.TextResponseBlock text_response = 6
         */
        textResponse: TextResponseBlock;
    } | {
        oneofKind: "mediaBlock";
        /**
         * @generated from protobuf field: chatbot.MediaBlock media_block = 7
         */
        mediaBlock: MediaBlock;
    } | {
        oneofKind: "linkStory";
        /**
         * @generated from protobuf field: chatbot.LinkStoryBlock link_story = 8
         */
        linkStory: LinkStoryBlock;
    } | {
        oneofKind: "conversationalForm";
        /**
         * @generated from protobuf field: chatbot.ConversationalFormBlock conversational_form = 9
         */
        conversationalForm: ConversationalFormBlock;
    } | {
        oneofKind: "typingDelay";
        /**
         * @generated from protobuf field: chatbot.TypingDelayBlock typing_delay = 10
         */
        typingDelay: TypingDelayBlock;
    } | {
        oneofKind: "jsonApiBlock";
        /**
         * @generated from protobuf field: chatbot.JsonApiBlock json_api_block = 11
         */
        jsonApiBlock: JsonApiBlock;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Represents the entire story flow to be saved
 *
 * @generated from protobuf message chatbot.StoryFlow
 */
export interface StoryFlow {
    /**
     * @generated from protobuf field: repeated chatbot.Block blocks = 1
     */
    blocks: Block[]; // You could add other metadata here like story_name, etc.
}
// @generated message type with reflection information, may provide speed optimized methods
class Block$Type extends MessageType<Block> {
    constructor() {
        super("chatbot.Block", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user_input", kind: "message", oneof: "data", T: () => UserInputBlock },
            { no: 6, name: "text_response", kind: "message", oneof: "data", T: () => TextResponseBlock },
            { no: 7, name: "media_block", kind: "message", oneof: "data", T: () => MediaBlock },
            { no: 8, name: "link_story", kind: "message", oneof: "data", T: () => LinkStoryBlock },
            { no: 9, name: "conversational_form", kind: "message", oneof: "data", T: () => ConversationalFormBlock },
            { no: 10, name: "typing_delay", kind: "message", oneof: "data", T: () => TypingDelayBlock },
            { no: 11, name: "json_api_block", kind: "message", oneof: "data", T: () => JsonApiBlock }
        ]);
    }
    create(value?: PartialMessage<Block>): Block {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = "";
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Block>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Block): Block {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* chatbot.UserInputBlock user_input */ 5:
                    message.data = {
                        oneofKind: "userInput",
                        userInput: UserInputBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).userInput)
                    };
                    break;
                case /* chatbot.TextResponseBlock text_response */ 6:
                    message.data = {
                        oneofKind: "textResponse",
                        textResponse: TextResponseBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).textResponse)
                    };
                    break;
                case /* chatbot.MediaBlock media_block */ 7:
                    message.data = {
                        oneofKind: "mediaBlock",
                        mediaBlock: MediaBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).mediaBlock)
                    };
                    break;
                case /* chatbot.LinkStoryBlock link_story */ 8:
                    message.data = {
                        oneofKind: "linkStory",
                        linkStory: LinkStoryBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).linkStory)
                    };
                    break;
                case /* chatbot.ConversationalFormBlock conversational_form */ 9:
                    message.data = {
                        oneofKind: "conversationalForm",
                        conversationalForm: ConversationalFormBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).conversationalForm)
                    };
                    break;
                case /* chatbot.TypingDelayBlock typing_delay */ 10:
                    message.data = {
                        oneofKind: "typingDelay",
                        typingDelay: TypingDelayBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).typingDelay)
                    };
                    break;
                case /* chatbot.JsonApiBlock json_api_block */ 11:
                    message.data = {
                        oneofKind: "jsonApiBlock",
                        jsonApiBlock: JsonApiBlock.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).jsonApiBlock)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Block, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* chatbot.UserInputBlock user_input = 5; */
        if (message.data.oneofKind === "userInput")
            UserInputBlock.internalBinaryWrite(message.data.userInput, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.TextResponseBlock text_response = 6; */
        if (message.data.oneofKind === "textResponse")
            TextResponseBlock.internalBinaryWrite(message.data.textResponse, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.MediaBlock media_block = 7; */
        if (message.data.oneofKind === "mediaBlock")
            MediaBlock.internalBinaryWrite(message.data.mediaBlock, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.LinkStoryBlock link_story = 8; */
        if (message.data.oneofKind === "linkStory")
            LinkStoryBlock.internalBinaryWrite(message.data.linkStory, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.ConversationalFormBlock conversational_form = 9; */
        if (message.data.oneofKind === "conversationalForm")
            ConversationalFormBlock.internalBinaryWrite(message.data.conversationalForm, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.TypingDelayBlock typing_delay = 10; */
        if (message.data.oneofKind === "typingDelay")
            TypingDelayBlock.internalBinaryWrite(message.data.typingDelay, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.JsonApiBlock json_api_block = 11; */
        if (message.data.oneofKind === "jsonApiBlock")
            JsonApiBlock.internalBinaryWrite(message.data.jsonApiBlock, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.Block
 */
export const Block = new Block$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryFlow$Type extends MessageType<StoryFlow> {
    constructor() {
        super("chatbot.StoryFlow", [
            { no: 1, name: "blocks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Block }
        ]);
    }
    create(value?: PartialMessage<StoryFlow>): StoryFlow {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.blocks = [];
        if (value !== undefined)
            reflectionMergePartial<StoryFlow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryFlow): StoryFlow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated chatbot.Block blocks */ 1:
                    message.blocks.push(Block.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryFlow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated chatbot.Block blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            Block.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.StoryFlow
 */
export const StoryFlow = new StoryFlow$Type();
