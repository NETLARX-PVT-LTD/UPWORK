/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: text_response_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export class QuickReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            title?: string;
            value?: string;
        }): QuickReply {
            const message = new QuickReply({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                value?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReply {
            return QuickReply.deserialize(bytes);
        }
    }
    export class TextResponseBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            content?: string;
            alternateResponses?: string[];
            quickReplies?: QuickReply[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("alternateResponses" in data && data.alternateResponses != undefined) {
                    this.alternateResponses = data.alternateResponses;
                }
                if ("quickReplies" in data && data.quickReplies != undefined) {
                    this.quickReplies = data.quickReplies;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get alternateResponses() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set alternateResponses(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get quickReplies() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReply, 4) as QuickReply[];
        }
        set quickReplies(value: QuickReply[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            type?: string;
            content?: string;
            alternateResponses?: string[];
            quickReplies?: ReturnType<typeof QuickReply.prototype.toObject>[];
        }): TextResponseBlock {
            const message = new TextResponseBlock({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.alternateResponses != null) {
                message.alternateResponses = data.alternateResponses;
            }
            if (data.quickReplies != null) {
                message.quickReplies = data.quickReplies.map(item => QuickReply.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                content?: string;
                alternateResponses?: string[];
                quickReplies?: ReturnType<typeof QuickReply.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.alternateResponses != null) {
                data.alternateResponses = this.alternateResponses;
            }
            if (this.quickReplies != null) {
                data.quickReplies = this.quickReplies.map((item: QuickReply) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.alternateResponses.length)
                writer.writeRepeatedString(3, this.alternateResponses);
            if (this.quickReplies.length)
                writer.writeRepeatedMessage(4, this.quickReplies, (item: QuickReply) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextResponseBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextResponseBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.quickReplies, () => pb_1.Message.addToRepeatedWrapperField(message, 4, QuickReply.deserialize(reader), QuickReply));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TextResponseBlock {
            return TextResponseBlock.deserialize(bytes);
        }
    }
}
