// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "text_response_block.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message chatbot.QuickReply
 */
export interface QuickReply {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string text = 2
     */
    text: string;
    /**
     * @generated from protobuf field: string ToComponentId = 3
     */
    toComponentId: string;
    /**
     * @generated from protobuf field: string ToComponentType = 4
     */
    toComponentType: string;
    /**
     * @generated from protobuf field: string textResponseId = 5
     */
    textResponseId: string;
}
/**
 * @generated from protobuf message chatbot.TextResponseBlock
 */
export interface TextResponseBlock {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string; // "textResponse"
    /**
     * @generated from protobuf field: string content = 2
     */
    content: string;
    /**
     * @generated from protobuf field: repeated string alternateResponses = 3
     */
    alternateResponses: string[];
    /**
     * @generated from protobuf field: repeated chatbot.QuickReply quickReplies = 4
     */
    quickReplies: QuickReply[];
    /**
     * @generated from protobuf field: string ToComponentType = 5
     */
    toComponentType: string;
    /**
     * @generated from protobuf field: string ToComponentId = 6
     */
    toComponentId: string;
    /**
     * @generated from protobuf field: int32 StoryId = 7
     */
    storyId: number;
    /**
     * @generated from protobuf field: string QuickReplyId = 8
     */
    quickReplyId: string;
    /**
     * @generated from protobuf field: int32 BotId = 9
     */
    botId: number;
    /**
     * @generated from protobuf field: string id = 10
     */
    id: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class QuickReply$Type extends MessageType<QuickReply> {
    constructor() {
        super("chatbot.QuickReply", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ToComponentId", kind: "scalar", jsonName: "ToComponentId", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ToComponentType", kind: "scalar", jsonName: "ToComponentType", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "textResponseId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuickReply>): QuickReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.text = "";
        message.toComponentId = "";
        message.toComponentType = "";
        message.textResponseId = "";
        if (value !== undefined)
            reflectionMergePartial<QuickReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickReply): QuickReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string ToComponentId */ 3:
                    message.toComponentId = reader.string();
                    break;
                case /* string ToComponentType */ 4:
                    message.toComponentType = reader.string();
                    break;
                case /* string textResponseId */ 5:
                    message.textResponseId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string ToComponentId = 3; */
        if (message.toComponentId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toComponentId);
        /* string ToComponentType = 4; */
        if (message.toComponentType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toComponentType);
        /* string textResponseId = 5; */
        if (message.textResponseId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textResponseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.QuickReply
 */
export const QuickReply = new QuickReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextResponseBlock$Type extends MessageType<TextResponseBlock> {
    constructor() {
        super("chatbot.TextResponseBlock", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "alternateResponses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "quickReplies", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QuickReply },
            { no: 5, name: "ToComponentType", kind: "scalar", jsonName: "ToComponentType", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ToComponentId", kind: "scalar", jsonName: "ToComponentId", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "StoryId", kind: "scalar", jsonName: "StoryId", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "QuickReplyId", kind: "scalar", jsonName: "QuickReplyId", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "BotId", kind: "scalar", jsonName: "BotId", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextResponseBlock>): TextResponseBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.content = "";
        message.alternateResponses = [];
        message.quickReplies = [];
        message.toComponentType = "";
        message.toComponentId = "";
        message.storyId = 0;
        message.quickReplyId = "";
        message.botId = 0;
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<TextResponseBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextResponseBlock): TextResponseBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* repeated string alternateResponses */ 3:
                    message.alternateResponses.push(reader.string());
                    break;
                case /* repeated chatbot.QuickReply quickReplies */ 4:
                    message.quickReplies.push(QuickReply.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string ToComponentType */ 5:
                    message.toComponentType = reader.string();
                    break;
                case /* string ToComponentId */ 6:
                    message.toComponentId = reader.string();
                    break;
                case /* int32 StoryId */ 7:
                    message.storyId = reader.int32();
                    break;
                case /* string QuickReplyId */ 8:
                    message.quickReplyId = reader.string();
                    break;
                case /* int32 BotId */ 9:
                    message.botId = reader.int32();
                    break;
                case /* string id */ 10:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextResponseBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* repeated string alternateResponses = 3; */
        for (let i = 0; i < message.alternateResponses.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.alternateResponses[i]);
        /* repeated chatbot.QuickReply quickReplies = 4; */
        for (let i = 0; i < message.quickReplies.length; i++)
            QuickReply.internalBinaryWrite(message.quickReplies[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string ToComponentType = 5; */
        if (message.toComponentType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toComponentType);
        /* string ToComponentId = 6; */
        if (message.toComponentId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.toComponentId);
        /* int32 StoryId = 7; */
        if (message.storyId !== 0)
            writer.tag(7, WireType.Varint).int32(message.storyId);
        /* string QuickReplyId = 8; */
        if (message.quickReplyId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.quickReplyId);
        /* int32 BotId = 9; */
        if (message.botId !== 0)
            writer.tag(9, WireType.Varint).int32(message.botId);
        /* string id = 10; */
        if (message.id !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.TextResponseBlock
 */
export const TextResponseBlock = new TextResponseBlock$Type();
