// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "story_session.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { MediaBlock } from "./media_block";
import { JsonApiBlock } from "./json_api_block";
import { TextResponseBlock } from "./text_response_block";
import { LinkStoryBlock } from "./link_story_block";
import { TypingDelayBlock } from "./typing_delay_block";
import { ConversationalFormBlock } from "./conversational_form_block";
import { UserInputBlock } from "./user_input_block";
// ---------------------------------------------------------------------
// StorySessionData aggregates all block types
// ---------------------------------------------------------------------

/**
 * @generated from protobuf message chatbot.StorySessionDataBlock
 */
export interface StorySessionDataBlock {
    /**
     * @generated from protobuf field: repeated chatbot.UserInputBlock phrases = 1
     */
    phrases: UserInputBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.UserInputBlock keywords = 2
     */
    keywords: UserInputBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.UserInputBlock anythings = 3
     */
    anythings: UserInputBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.Connectionn connections = 4
     */
    connections: Connectionn[];
    /**
     * @generated from protobuf field: repeated chatbot.ConversationalFormBlock conversationalForms = 5
     */
    conversationalForms: ConversationalFormBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.TypingDelayBlock typingDelays = 6
     */
    typingDelays: TypingDelayBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.LinkStoryBlock linkStories = 7
     */
    linkStories: LinkStoryBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.TextResponseBlock textResponses = 8
     */
    textResponses: TextResponseBlock[];
    /**
     * @generated from protobuf field: repeated chatbot.JsonApiBlock jsonAPIs = 9
     */
    jsonAPIs: JsonApiBlock[];
    /**
     * @generated from protobuf field: chatbot.Storiess story = 10
     */
    story?: Storiess;
    /**
     * @generated from protobuf field: repeated chatbot.MediaBlock medias = 11
     */
    medias: MediaBlock[];
}
/**
 * @generated from protobuf message chatbot.Storiess
 */
export interface Storiess {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string rootBlockConnectionId = 3
     */
    rootBlockConnectionId: string; // use string to hold Guid
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdDate = 4
     */
    createdDate?: Timestamp;
}
/**
 * @generated from protobuf message chatbot.Connectionn
 */
export interface Connectionn {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: int32 StoryId = 2
     */
    storyId: number;
    /**
     * @generated from protobuf field: string fromComponentType = 3
     */
    fromComponentType: string;
    /**
     * @generated from protobuf field: string fromComponentId = 4
     */
    fromComponentId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdDate = 5
     */
    createdDate?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class StorySessionDataBlock$Type extends MessageType<StorySessionDataBlock> {
    constructor() {
        super("chatbot.StorySessionDataBlock", [
            { no: 1, name: "phrases", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserInputBlock },
            { no: 2, name: "keywords", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserInputBlock },
            { no: 3, name: "anythings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserInputBlock },
            { no: 4, name: "connections", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Connectionn },
            { no: 5, name: "conversationalForms", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ConversationalFormBlock },
            { no: 6, name: "typingDelays", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TypingDelayBlock },
            { no: 7, name: "linkStories", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LinkStoryBlock },
            { no: 8, name: "textResponses", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TextResponseBlock },
            { no: 9, name: "jsonAPIs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => JsonApiBlock },
            { no: 10, name: "story", kind: "message", T: () => Storiess },
            { no: 11, name: "medias", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MediaBlock }
        ]);
    }
    create(value?: PartialMessage<StorySessionDataBlock>): StorySessionDataBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phrases = [];
        message.keywords = [];
        message.anythings = [];
        message.connections = [];
        message.conversationalForms = [];
        message.typingDelays = [];
        message.linkStories = [];
        message.textResponses = [];
        message.jsonAPIs = [];
        message.medias = [];
        if (value !== undefined)
            reflectionMergePartial<StorySessionDataBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorySessionDataBlock): StorySessionDataBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated chatbot.UserInputBlock phrases */ 1:
                    message.phrases.push(UserInputBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.UserInputBlock keywords */ 2:
                    message.keywords.push(UserInputBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.UserInputBlock anythings */ 3:
                    message.anythings.push(UserInputBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.Connectionn connections */ 4:
                    message.connections.push(Connectionn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.ConversationalFormBlock conversationalForms */ 5:
                    message.conversationalForms.push(ConversationalFormBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.TypingDelayBlock typingDelays */ 6:
                    message.typingDelays.push(TypingDelayBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.LinkStoryBlock linkStories */ 7:
                    message.linkStories.push(LinkStoryBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.TextResponseBlock textResponses */ 8:
                    message.textResponses.push(TextResponseBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated chatbot.JsonApiBlock jsonAPIs */ 9:
                    message.jsonAPIs.push(JsonApiBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* chatbot.Storiess story */ 10:
                    message.story = Storiess.internalBinaryRead(reader, reader.uint32(), options, message.story);
                    break;
                case /* repeated chatbot.MediaBlock medias */ 11:
                    message.medias.push(MediaBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorySessionDataBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated chatbot.UserInputBlock phrases = 1; */
        for (let i = 0; i < message.phrases.length; i++)
            UserInputBlock.internalBinaryWrite(message.phrases[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.UserInputBlock keywords = 2; */
        for (let i = 0; i < message.keywords.length; i++)
            UserInputBlock.internalBinaryWrite(message.keywords[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.UserInputBlock anythings = 3; */
        for (let i = 0; i < message.anythings.length; i++)
            UserInputBlock.internalBinaryWrite(message.anythings[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.Connectionn connections = 4; */
        for (let i = 0; i < message.connections.length; i++)
            Connectionn.internalBinaryWrite(message.connections[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.ConversationalFormBlock conversationalForms = 5; */
        for (let i = 0; i < message.conversationalForms.length; i++)
            ConversationalFormBlock.internalBinaryWrite(message.conversationalForms[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.TypingDelayBlock typingDelays = 6; */
        for (let i = 0; i < message.typingDelays.length; i++)
            TypingDelayBlock.internalBinaryWrite(message.typingDelays[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.LinkStoryBlock linkStories = 7; */
        for (let i = 0; i < message.linkStories.length; i++)
            LinkStoryBlock.internalBinaryWrite(message.linkStories[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.TextResponseBlock textResponses = 8; */
        for (let i = 0; i < message.textResponses.length; i++)
            TextResponseBlock.internalBinaryWrite(message.textResponses[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.JsonApiBlock jsonAPIs = 9; */
        for (let i = 0; i < message.jsonAPIs.length; i++)
            JsonApiBlock.internalBinaryWrite(message.jsonAPIs[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* chatbot.Storiess story = 10; */
        if (message.story)
            Storiess.internalBinaryWrite(message.story, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated chatbot.MediaBlock medias = 11; */
        for (let i = 0; i < message.medias.length; i++)
            MediaBlock.internalBinaryWrite(message.medias[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.StorySessionDataBlock
 */
export const StorySessionDataBlock = new StorySessionDataBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Storiess$Type extends MessageType<Storiess> {
    constructor() {
        super("chatbot.Storiess", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rootBlockConnectionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "createdDate", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Storiess>): Storiess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.rootBlockConnectionId = "";
        if (value !== undefined)
            reflectionMergePartial<Storiess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Storiess): Storiess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string rootBlockConnectionId */ 3:
                    message.rootBlockConnectionId = reader.string();
                    break;
                case /* google.protobuf.Timestamp createdDate */ 4:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Storiess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string rootBlockConnectionId = 3; */
        if (message.rootBlockConnectionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rootBlockConnectionId);
        /* google.protobuf.Timestamp createdDate = 4; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.Storiess
 */
export const Storiess = new Storiess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Connectionn$Type extends MessageType<Connectionn> {
    constructor() {
        super("chatbot.Connectionn", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StoryId", kind: "scalar", jsonName: "StoryId", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "fromComponentType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fromComponentId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "createdDate", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Connectionn>): Connectionn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.storyId = 0;
        message.fromComponentType = "";
        message.fromComponentId = "";
        if (value !== undefined)
            reflectionMergePartial<Connectionn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Connectionn): Connectionn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 StoryId */ 2:
                    message.storyId = reader.int32();
                    break;
                case /* string fromComponentType */ 3:
                    message.fromComponentType = reader.string();
                    break;
                case /* string fromComponentId */ 4:
                    message.fromComponentId = reader.string();
                    break;
                case /* google.protobuf.Timestamp createdDate */ 5:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Connectionn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 StoryId = 2; */
        if (message.storyId !== 0)
            writer.tag(2, WireType.Varint).int32(message.storyId);
        /* string fromComponentType = 3; */
        if (message.fromComponentType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromComponentType);
        /* string fromComponentId = 4; */
        if (message.fromComponentId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fromComponentId);
        /* google.protobuf.Timestamp createdDate = 5; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.Connectionn
 */
export const Connectionn = new Connectionn$Type();
