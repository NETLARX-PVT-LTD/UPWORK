/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: media_block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./button";
import * as pb_1 from "google-protobuf";
export namespace chatbot {
    export enum MediaType {
        MEDIA_TYPE_UNSPECIFIED = 0,
        MEDIA_TYPE_TEXT = 1,
        MEDIA_TYPE_IMAGE = 2,
        MEDIA_TYPE_VIDEO = 3
    }
    export class ImageSlide extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            title?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            url?: string;
            title?: string;
            description?: string;
        }): ImageSlide {
            const message = new ImageSlide({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                title?: string;
                description?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageSlide {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageSlide();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageSlide {
            return ImageSlide.deserialize(bytes);
        }
    }
    export class MediaBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            mediaId?: string;
            mediaType?: MediaType;
            singleImageUrl?: string;
            videoUrl?: string;
            audioUrl?: string;
            fileUrl?: string;
            slides?: ImageSlide[];
            mediaName?: string;
            buttonTitle?: string;
            buttonTextMessage?: string;
            buttonType?: string;
            buttonLinkedMediaId?: string;
            buttonUrl?: string;
            buttons?: dependency_1.chatbot.Button[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("mediaId" in data && data.mediaId != undefined) {
                    this.mediaId = data.mediaId;
                }
                if ("mediaType" in data && data.mediaType != undefined) {
                    this.mediaType = data.mediaType;
                }
                if ("singleImageUrl" in data && data.singleImageUrl != undefined) {
                    this.singleImageUrl = data.singleImageUrl;
                }
                if ("videoUrl" in data && data.videoUrl != undefined) {
                    this.videoUrl = data.videoUrl;
                }
                if ("audioUrl" in data && data.audioUrl != undefined) {
                    this.audioUrl = data.audioUrl;
                }
                if ("fileUrl" in data && data.fileUrl != undefined) {
                    this.fileUrl = data.fileUrl;
                }
                if ("slides" in data && data.slides != undefined) {
                    this.slides = data.slides;
                }
                if ("mediaName" in data && data.mediaName != undefined) {
                    this.mediaName = data.mediaName;
                }
                if ("buttonTitle" in data && data.buttonTitle != undefined) {
                    this.buttonTitle = data.buttonTitle;
                }
                if ("buttonTextMessage" in data && data.buttonTextMessage != undefined) {
                    this.buttonTextMessage = data.buttonTextMessage;
                }
                if ("buttonType" in data && data.buttonType != undefined) {
                    this.buttonType = data.buttonType;
                }
                if ("buttonLinkedMediaId" in data && data.buttonLinkedMediaId != undefined) {
                    this.buttonLinkedMediaId = data.buttonLinkedMediaId;
                }
                if ("buttonUrl" in data && data.buttonUrl != undefined) {
                    this.buttonUrl = data.buttonUrl;
                }
                if ("buttons" in data && data.buttons != undefined) {
                    this.buttons = data.buttons;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mediaId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set mediaId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get mediaType() {
            return pb_1.Message.getFieldWithDefault(this, 3, MediaType.MEDIA_TYPE_UNSPECIFIED) as MediaType;
        }
        set mediaType(value: MediaType) {
            pb_1.Message.setField(this, 3, value);
        }
        get singleImageUrl() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set singleImageUrl(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get videoUrl() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set videoUrl(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get audioUrl() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set audioUrl(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get fileUrl() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set fileUrl(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get slides() {
            return pb_1.Message.getRepeatedWrapperField(this, ImageSlide, 8) as ImageSlide[];
        }
        set slides(value: ImageSlide[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get mediaName() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set mediaName(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get buttonTitle() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set buttonTitle(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get buttonTextMessage() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set buttonTextMessage(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get buttonType() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set buttonType(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get buttonLinkedMediaId() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set buttonLinkedMediaId(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get buttonUrl() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set buttonUrl(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get buttons() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.chatbot.Button, 15) as dependency_1.chatbot.Button[];
        }
        set buttons(value: dependency_1.chatbot.Button[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        static fromObject(data: {
            type?: string;
            mediaId?: string;
            mediaType?: MediaType;
            singleImageUrl?: string;
            videoUrl?: string;
            audioUrl?: string;
            fileUrl?: string;
            slides?: ReturnType<typeof ImageSlide.prototype.toObject>[];
            mediaName?: string;
            buttonTitle?: string;
            buttonTextMessage?: string;
            buttonType?: string;
            buttonLinkedMediaId?: string;
            buttonUrl?: string;
            buttons?: ReturnType<typeof dependency_1.chatbot.Button.prototype.toObject>[];
        }): MediaBlock {
            const message = new MediaBlock({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.mediaId != null) {
                message.mediaId = data.mediaId;
            }
            if (data.mediaType != null) {
                message.mediaType = data.mediaType;
            }
            if (data.singleImageUrl != null) {
                message.singleImageUrl = data.singleImageUrl;
            }
            if (data.videoUrl != null) {
                message.videoUrl = data.videoUrl;
            }
            if (data.audioUrl != null) {
                message.audioUrl = data.audioUrl;
            }
            if (data.fileUrl != null) {
                message.fileUrl = data.fileUrl;
            }
            if (data.slides != null) {
                message.slides = data.slides.map(item => ImageSlide.fromObject(item));
            }
            if (data.mediaName != null) {
                message.mediaName = data.mediaName;
            }
            if (data.buttonTitle != null) {
                message.buttonTitle = data.buttonTitle;
            }
            if (data.buttonTextMessage != null) {
                message.buttonTextMessage = data.buttonTextMessage;
            }
            if (data.buttonType != null) {
                message.buttonType = data.buttonType;
            }
            if (data.buttonLinkedMediaId != null) {
                message.buttonLinkedMediaId = data.buttonLinkedMediaId;
            }
            if (data.buttonUrl != null) {
                message.buttonUrl = data.buttonUrl;
            }
            if (data.buttons != null) {
                message.buttons = data.buttons.map(item => dependency_1.chatbot.Button.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                mediaId?: string;
                mediaType?: MediaType;
                singleImageUrl?: string;
                videoUrl?: string;
                audioUrl?: string;
                fileUrl?: string;
                slides?: ReturnType<typeof ImageSlide.prototype.toObject>[];
                mediaName?: string;
                buttonTitle?: string;
                buttonTextMessage?: string;
                buttonType?: string;
                buttonLinkedMediaId?: string;
                buttonUrl?: string;
                buttons?: ReturnType<typeof dependency_1.chatbot.Button.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.mediaId != null) {
                data.mediaId = this.mediaId;
            }
            if (this.mediaType != null) {
                data.mediaType = this.mediaType;
            }
            if (this.singleImageUrl != null) {
                data.singleImageUrl = this.singleImageUrl;
            }
            if (this.videoUrl != null) {
                data.videoUrl = this.videoUrl;
            }
            if (this.audioUrl != null) {
                data.audioUrl = this.audioUrl;
            }
            if (this.fileUrl != null) {
                data.fileUrl = this.fileUrl;
            }
            if (this.slides != null) {
                data.slides = this.slides.map((item: ImageSlide) => item.toObject());
            }
            if (this.mediaName != null) {
                data.mediaName = this.mediaName;
            }
            if (this.buttonTitle != null) {
                data.buttonTitle = this.buttonTitle;
            }
            if (this.buttonTextMessage != null) {
                data.buttonTextMessage = this.buttonTextMessage;
            }
            if (this.buttonType != null) {
                data.buttonType = this.buttonType;
            }
            if (this.buttonLinkedMediaId != null) {
                data.buttonLinkedMediaId = this.buttonLinkedMediaId;
            }
            if (this.buttonUrl != null) {
                data.buttonUrl = this.buttonUrl;
            }
            if (this.buttons != null) {
                data.buttons = this.buttons.map((item: dependency_1.chatbot.Button) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.mediaId.length)
                writer.writeString(2, this.mediaId);
            if (this.mediaType != MediaType.MEDIA_TYPE_UNSPECIFIED)
                writer.writeEnum(3, this.mediaType);
            if (this.singleImageUrl.length)
                writer.writeString(4, this.singleImageUrl);
            if (this.videoUrl.length)
                writer.writeString(5, this.videoUrl);
            if (this.audioUrl.length)
                writer.writeString(6, this.audioUrl);
            if (this.fileUrl.length)
                writer.writeString(7, this.fileUrl);
            if (this.slides.length)
                writer.writeRepeatedMessage(8, this.slides, (item: ImageSlide) => item.serialize(writer));
            if (this.mediaName.length)
                writer.writeString(9, this.mediaName);
            if (this.buttonTitle.length)
                writer.writeString(10, this.buttonTitle);
            if (this.buttonTextMessage.length)
                writer.writeString(11, this.buttonTextMessage);
            if (this.buttonType.length)
                writer.writeString(12, this.buttonType);
            if (this.buttonLinkedMediaId.length)
                writer.writeString(13, this.buttonLinkedMediaId);
            if (this.buttonUrl.length)
                writer.writeString(14, this.buttonUrl);
            if (this.buttons.length)
                writer.writeRepeatedMessage(15, this.buttons, (item: dependency_1.chatbot.Button) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MediaBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MediaBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.mediaId = reader.readString();
                        break;
                    case 3:
                        message.mediaType = reader.readEnum();
                        break;
                    case 4:
                        message.singleImageUrl = reader.readString();
                        break;
                    case 5:
                        message.videoUrl = reader.readString();
                        break;
                    case 6:
                        message.audioUrl = reader.readString();
                        break;
                    case 7:
                        message.fileUrl = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.slides, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ImageSlide.deserialize(reader), ImageSlide));
                        break;
                    case 9:
                        message.mediaName = reader.readString();
                        break;
                    case 10:
                        message.buttonTitle = reader.readString();
                        break;
                    case 11:
                        message.buttonTextMessage = reader.readString();
                        break;
                    case 12:
                        message.buttonType = reader.readString();
                        break;
                    case 13:
                        message.buttonLinkedMediaId = reader.readString();
                        break;
                    case 14:
                        message.buttonUrl = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.buttons, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_1.chatbot.Button.deserialize(reader), dependency_1.chatbot.Button));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MediaBlock {
            return MediaBlock.deserialize(bytes);
        }
    }
}
