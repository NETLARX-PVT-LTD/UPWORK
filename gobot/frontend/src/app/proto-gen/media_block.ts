// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "media_block.proto" (package "chatbot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Button } from "./button";
/**
 * @generated from protobuf message chatbot.ImageSlide
 */
export interface ImageSlide {
    /**
     * @generated from protobuf field: string url = 1
     */
    url: string;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3
     */
    description: string;
}
/**
 * @generated from protobuf message chatbot.MediaBlock
 */
export interface MediaBlock {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string; // "mediaBlock"
    /**
     * @generated from protobuf field: string mediaId = 2
     */
    mediaId: string;
    /**
     * @generated from protobuf field: chatbot.MediaType mediaType = 3
     */
    mediaType: MediaType;
    /**
     * @generated from protobuf field: string singleImageUrl = 4
     */
    singleImageUrl: string;
    /**
     * @generated from protobuf field: string videoUrl = 5
     */
    videoUrl: string;
    /**
     * @generated from protobuf field: string audioUrl = 6
     */
    audioUrl: string;
    /**
     * @generated from protobuf field: string fileUrl = 7
     */
    fileUrl: string;
    /**
     * @generated from protobuf field: repeated chatbot.ImageSlide slides = 8
     */
    slides: ImageSlide[];
    /**
     * @generated from protobuf field: string mediaName = 9
     */
    mediaName: string;
    /**
     * @generated from protobuf field: string buttonTitle = 10
     */
    buttonTitle: string;
    /**
     * @generated from protobuf field: string buttonTextMessage = 11
     */
    buttonTextMessage: string;
    /**
     * @generated from protobuf field: string buttonType = 12
     */
    buttonType: string;
    /**
     * @generated from protobuf field: string buttonLinkedMediaId = 13
     */
    buttonLinkedMediaId: string;
    /**
     * @generated from protobuf field: string buttonUrl = 14
     */
    buttonUrl: string;
    /**
     * @generated from protobuf field: repeated chatbot.Button buttons = 15
     */
    buttons: Button[];
}
/**
 * @generated from protobuf enum chatbot.MediaType
 */
export enum MediaType {
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_TEXT = 1;
     */
    TEXT = 1,
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_IMAGE = 2;
     */
    IMAGE = 2,
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_VIDEO = 3;
     */
    VIDEO = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ImageSlide$Type extends MessageType<ImageSlide> {
    constructor() {
        super("chatbot.ImageSlide", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImageSlide>): ImageSlide {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        message.title = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<ImageSlide>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageSlide): ImageSlide {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageSlide, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.ImageSlide
 */
export const ImageSlide = new ImageSlide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MediaBlock$Type extends MessageType<MediaBlock> {
    constructor() {
        super("chatbot.MediaBlock", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mediaId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mediaType", kind: "enum", T: () => ["chatbot.MediaType", MediaType, "MEDIA_TYPE_"] },
            { no: 4, name: "singleImageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "videoUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "audioUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "fileUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "slides", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ImageSlide },
            { no: 9, name: "mediaName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "buttonTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "buttonTextMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "buttonType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "buttonLinkedMediaId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "buttonUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "buttons", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Button }
        ]);
    }
    create(value?: PartialMessage<MediaBlock>): MediaBlock {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.mediaId = "";
        message.mediaType = 0;
        message.singleImageUrl = "";
        message.videoUrl = "";
        message.audioUrl = "";
        message.fileUrl = "";
        message.slides = [];
        message.mediaName = "";
        message.buttonTitle = "";
        message.buttonTextMessage = "";
        message.buttonType = "";
        message.buttonLinkedMediaId = "";
        message.buttonUrl = "";
        message.buttons = [];
        if (value !== undefined)
            reflectionMergePartial<MediaBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MediaBlock): MediaBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string mediaId */ 2:
                    message.mediaId = reader.string();
                    break;
                case /* chatbot.MediaType mediaType */ 3:
                    message.mediaType = reader.int32();
                    break;
                case /* string singleImageUrl */ 4:
                    message.singleImageUrl = reader.string();
                    break;
                case /* string videoUrl */ 5:
                    message.videoUrl = reader.string();
                    break;
                case /* string audioUrl */ 6:
                    message.audioUrl = reader.string();
                    break;
                case /* string fileUrl */ 7:
                    message.fileUrl = reader.string();
                    break;
                case /* repeated chatbot.ImageSlide slides */ 8:
                    message.slides.push(ImageSlide.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string mediaName */ 9:
                    message.mediaName = reader.string();
                    break;
                case /* string buttonTitle */ 10:
                    message.buttonTitle = reader.string();
                    break;
                case /* string buttonTextMessage */ 11:
                    message.buttonTextMessage = reader.string();
                    break;
                case /* string buttonType */ 12:
                    message.buttonType = reader.string();
                    break;
                case /* string buttonLinkedMediaId */ 13:
                    message.buttonLinkedMediaId = reader.string();
                    break;
                case /* string buttonUrl */ 14:
                    message.buttonUrl = reader.string();
                    break;
                case /* repeated chatbot.Button buttons */ 15:
                    message.buttons.push(Button.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MediaBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string mediaId = 2; */
        if (message.mediaId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mediaId);
        /* chatbot.MediaType mediaType = 3; */
        if (message.mediaType !== 0)
            writer.tag(3, WireType.Varint).int32(message.mediaType);
        /* string singleImageUrl = 4; */
        if (message.singleImageUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.singleImageUrl);
        /* string videoUrl = 5; */
        if (message.videoUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.videoUrl);
        /* string audioUrl = 6; */
        if (message.audioUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.audioUrl);
        /* string fileUrl = 7; */
        if (message.fileUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.fileUrl);
        /* repeated chatbot.ImageSlide slides = 8; */
        for (let i = 0; i < message.slides.length; i++)
            ImageSlide.internalBinaryWrite(message.slides[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string mediaName = 9; */
        if (message.mediaName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.mediaName);
        /* string buttonTitle = 10; */
        if (message.buttonTitle !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.buttonTitle);
        /* string buttonTextMessage = 11; */
        if (message.buttonTextMessage !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.buttonTextMessage);
        /* string buttonType = 12; */
        if (message.buttonType !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.buttonType);
        /* string buttonLinkedMediaId = 13; */
        if (message.buttonLinkedMediaId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.buttonLinkedMediaId);
        /* string buttonUrl = 14; */
        if (message.buttonUrl !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.buttonUrl);
        /* repeated chatbot.Button buttons = 15; */
        for (let i = 0; i < message.buttons.length; i++)
            Button.internalBinaryWrite(message.buttons[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chatbot.MediaBlock
 */
export const MediaBlock = new MediaBlock$Type();
